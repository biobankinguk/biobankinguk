
trigger:
  branches:
    include:
    - 'master'
  paths:
    include:
    - src/Publications/*

variables:
  vmImageName: 'windows-latest'
  keyVaultName: 'biobanking-services-test'
  dbServerName: 'biobankinguk-services-test.database.windows.net'
  functionAppName: 'biobankinguk-publications-test'
  workingDirectory: 'src/Publications'

stages:
- stage: Build
  displayName: Build Stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: $(workingDirectory)/PublicationsAzureFunctions/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

  - job: Migrate
    displayName: Migrate EF Database
    pool:
      vmImage: $(vmImageName)
    steps:
      - script: |
          dotnet tool install --global dotnet-ef --version 3.1.6
        displayName: Configure Entity Framework
        workingDirectory: $(workingDirectory)
      
      - script: >-
          dotnet ef migrations script
          -p ./Publications/Publications.csproj
          -s ./PublicationsAzureFunctions/PublicationsAzureFunctions.csproj
          -i -o $(System.DefaultWorkingDirectory)/$(Build.BuildId)_migration.sql
        displayName: Create EF Migration Artifact
        workingDirectory: $(workingDirectory)
        
      - publish: $(System.DefaultWorkingDirectory)/$(Build.BuildId)_migration.sql
        artifact: db_migration
        displayName: Publish Migration Script

- stage: DeployTest
  displayName: Deploy To Test
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
          
          - task: AzureKeyVault@1
            displayName:  'Fetching database credentials'
            inputs:
              azureSubscription: '$(azureSubscription)'
              keyVaultName: '$(keyVaultName)'
              secretsFilter: '*'
              runAsPreJob: false

          - task: SqlAzureDacpacDeployment@1
            displayName:  'Database migrations'
            inputs:
              azureSubscription: '$(azureSubscription)'
              AuthenticationType: 'server'
              ServerName: $(dbServerName)
              DatabaseName: 'services'
              SqlUsername: '$(sqldb-user)'
              SqlPassword: '$(sqldb-password)'
              deployType: 'SqlTask'
              SqlFile: '$(Pipeline.Workspace)/db_migration/$(Build.BuildId)_migration.sql'
              IpDetectionMethod: 'AutoDetect'
              DeleteFirewallRule: false