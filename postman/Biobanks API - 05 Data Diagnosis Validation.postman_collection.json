{
	"info": {
		"_postman_id": "bfcd805e-bc8d-48a2-821f-712cc4ca34e8",
		"name": "Biobanks API - 05 Data Diagnosis Validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "[Pre-Test] Reject Queue",
			"item": [
				{
					"name": "[Pre-Test] Reject Queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api-url}}/{{user-biobank-id}}/reject",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"{{user-biobank-id}}",
								"reject"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Post Data",
			"item": [
				{
					"name": "Post diagnosis (DiagnosisCode)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let id = response.id;",
									"let records = response.totalRecords;",
									"",
									"pm.environment.set(\"id3\", id);",
									"pm.environment.set(\"records3\", records);",
									"",
									"pm.test(\"Record ID: \"+ response.id + \" - Status code is \" + pm.response.code, () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202,200]);",
									"});",
									"",
									"pm.test(\"Correct number of samples submitted (6 valid and 1 invalid)\", () => {",
									"    pm.expect(records).to.eq(7);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"diagnoses\": [\r\n    {\r\n      \"diagnosis\": {\r\n        \"individualReferenceId\": \"VALID1\",\r\n        \"dateDiagnosed\": \"2016-04-14T09:15:46\",\r\n        \"diagnosisCode\": \"10001005\",\r\n        \"DiagnosisCodeOntology\": \"SNOMED-CT\",\r\n        \"DiagnosisCodeOntologyVersion\": \"25\"\r\n      },\r\n      \"op\": \"submit\"\r\n    },\r\n\t{\r\n      \"diagnosis\": {\r\n        \"individualReferenceId\": \"INVAL1\",\r\n        \"dateDiagnosed\": \"2016-04-14T07:15:46\",\r\n        \"diagnosisCode\": \"10002003\",\r\n        \"DiagnosisCodeOntology\": \"SNOMED-CT\",\r\n        \"DiagnosisCodeOntologyVersion\": \"25\"\r\n      },\r\n      \"op\": \"submit\"\r\n    },\r\n\t{\r\n      \"diagnosis\": {\r\n        \"individualReferenceId\": \"INVAL2\",\r\n        \"dateDiagnosed\": \"2016-04-14T09:15:46\",\r\n        \"diagnosisCode\": \"1005009\",\r\n        \"DiagnosisCodeOntology\": \"SNOMED-CT\",\r\n        \"DiagnosisCodeOntologyVersion\": \"25\"\r\n      },\r\n      \"op\": \"submit\"\r\n    },\r\n\t{\r\n      \"diagnosis\": {\r\n        \"individualReferenceId\": \"INVAL3\",\r\n        \"dateDiagnosed\": \"2016-04-14T09:16:46\",\r\n        \"diagnosisCode\": \"119294007\",\r\n        \"DiagnosisCodeOntology\": \"SNOMED-CT\",\r\n        \"DiagnosisCodeOntologyVersion\": \"25\"\r\n      },\r\n      \"op\": \"submit\"\r\n    },\r\n\t{\r\n      \"diagnosis\": {\r\n        \"individualReferenceId\": \"INVAL4\",\r\n        \"dateDiagnosed\": \"2016-04-14T09:18:46\",\r\n        \"diagnosisCode\": \"25179006\",\r\n        \"DiagnosisCodeOntology\": \"SNOMED-CT\",\r\n        \"DiagnosisCodeOntologyVersion\": \"25\"\r\n      },\r\n      \"op\": \"submit\"\r\n    },\r\n\t{\r\n      \"diagnosis\": {\r\n        \"individualReferenceId\": \"INVAL5\",\r\n        \"dateDiagnosed\": \"2016-04-14T09:19:46\",\r\n        \"diagnosisCode\": \"Abcd\",\r\n        \"DiagnosisCodeOntology\": \"SNOMED-CT\",\r\n        \"DiagnosisCodeOntologyVersion\": \"25\"\r\n      },\r\n      \"op\": \"submit\"\r\n    },\r\n\t{\r\n      \"diagnosis\": {\r\n        \"individualReferenceId\": \"INVAL6\",\r\n        \"dateDiagnosed\": \"2016-04-14T09:20:46\",\r\n        \"diagnosisCode\": \"1234\",\r\n        \"DiagnosisCodeOntology\": \"SNOMED-CT\",\r\n        \"DiagnosisCodeOntologyVersion\": \"25\"\r\n      },\r\n      \"op\": \"submit\"\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{api-url}}/submit/{{user-biobank-id}}",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"submit",
								"{{user-biobank-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post diagnosis (DiagnosisCodeOntology)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"let id = response.id;",
									"let records = response.totalRecords;",
									"",
									"pm.environment.set(\"id15\", id);",
									"pm.environment.set(\"records15\", records);",
									"",
									"pm.test(\"Record ID: \"+ response.id + \" - Status code is \" + pm.response.code, () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202,200]);",
									"});",
									"",
									"pm.test(\"Correct number of samples submitted\", () => {",
									"    pm.expect(records).to.eq(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"diagnoses\": [\n    {\n      \"diagnosis\": {\n        \"individualReferenceId\": \"VAL1\",\n        \"dateDiagnosed\": \"2016-04-14T10:15:46\",\n        \"diagnosisCode\": \"10001005\",\n        \"DiagnosisCodeOntology\": \"SNOMED-CT\",\n        \"DiagnosisCodeOntologyVersion\": \"25\"\n      },\n      \"op\": \"submit\"\n    },\n\t{\n      \"diagnosis\": {\n        \"individualReferenceId\": \"INVAL1\",\n        \"dateDiagnosed\": \"2016-04-14T08:15:46\",\n        \"diagnosisCode\": \"10001005\",\n        \"DiagnosisCodeOntology\": \"invalid\",\n        \"DiagnosisCodeOntologyVersion\": \"25\"\n      },\n      \"op\": \"submit\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{api-url}}/submit/{{user-biobank-id}}",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"submit",
								"{{user-biobank-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post diagnosis (DiagnosisCodeOntologyVersion)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Capture environment variables",
									"//access response body",
									"let response = pm.response.json();",
									"//extract the ID and total records",
									"let id = response.id;",
									"let records = response.totalRecords;",
									"//Set ID as environment variable",
									"pm.environment.set(\"id16\",id);",
									"pm.environment.set(\"records16\",records);",
									"",
									"//Test that status code is either 200, 201 or 202    ",
									"pm.test(\"Record ID: \"+ response.id + \" - Status code is \" + pm.response.code, function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202,200]);",
									"});",
									"",
									"//Check number of sumbission is 3",
									"tests[ \"number of samples submitted is \" + response.totalRecords + \" (1 valid field variables and 2 invalid)\"]= response.totalRecords === 3;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"diagnoses\": [\n    {\n      \"diagnosis\": {\n        \"individualReferenceId\": \"VALID1\",\n        \"dateDiagnosed\": \"2016-04-14T10:15:46\",\n        \"diagnosisCode\": \"10001005\",\n        \"DiagnosisCodeOntology\": \"SNOMED-CT\",\n        \"DiagnosisCodeOntologyVersion\": \"25\"\n      },\n      \"op\": \"submit\"\n    },\n\t{\n      \"diagnosis\": {\n        \"individualReferenceId\": \"INVAL1\",\n        \"dateDiagnosed\": \"2016-04-14T11:15:46\",\n        \"diagnosisCode\": \"10001005\",\n        \"DiagnosisCodeOntology\": \"SNOMED-CT\",\n        \"DiagnosisCodeOntologyVersion\": \"24\"\n      },\n      \"op\": \"submit\"\n    },\n    {\n      \"diagnosis\": {\n        \"individualReferenceId\": \"INVAL2\",\n        \"dateDiagnosed\": \"2016-04-14T15:15:46\",\n        \"diagnosisCode\": \"10001005\",\n        \"DiagnosisCodeOntology\": \"SNOMED-CT\",\n        \"DiagnosisCodeOntologyVersion\": \"Abcd\"\n      },\n      \"op\": \"submit\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{api-url}}/submit/{{user-biobank-id}}",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"submit",
								"{{user-biobank-id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Get Submission Status",
			"item": [
				{
					"name": "Check for successsful processing of data validation submissions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(() => {}, 10000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\",  () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All open submissions have processed\", () => {",
									"",
									"    let complete = !response",
									"        .submissions",
									"        .some(x => x.status == \"Open\" && x.recordsProcessed != x.totalRecords);",
									"",
									"    // Re-Run Test If Not Yet Complete",
									"    if (!complete)",
									"    {",
									"        postman.setNextRequest(\"Check for successsful processing of data validation submissions\");",
									"    }",
									"    ",
									"    pm.expect(complete).to.eq(true);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api-url}}/status/biobank/{{user-biobank-id}}?limit=100",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"status",
								"biobank",
								"{{user-biobank-id}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Submission status (diagnosisCode)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//access response body",
									"let response = pm.response.json();",
									"",
									"// // keep re-requesting until expected records are processed",
									"// if(Number(response.recordsProcessed) < 1){",
									"//     postman.setNextRequest('GET Submission status (diagnosisCode)');",
									"// }",
									"// else",
									"// {",
									"//check service returns 200",
									"pm.test(\"Record ID: \" + response.id + \" - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check number of sumbissions",
									"pm.test(\"number of samples submitted = \" + response.totalRecords, function() {",
									"    pm.expect(response.totalRecords).to.eql(environment.records3);",
									"});",
									"",
									"//Check number of records failed",
									"pm.test(response.recordsFailed + \" of the \" + response.totalrecords +\" records failed to process\", function() {",
									"    pm.expect(response.recordsFailed).to.eql(6);",
									"});",
									"",
									"//Check number of records passed",
									"pm.test(response.recordsPassed + \" of the \" + response.totalrecords +\" records successfully processed\", function() {",
									"    pm.expect(response.recordsPassed).to.eql(1);",
									"});",
									"// }"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api-url}}/status/{{id3}}",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"status",
								"{{id3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Submission status (diagnosisCodeOntology)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//access response body",
									"let response = pm.response.json();",
									"",
									"// // keep re-requesting until expected records are processed",
									"// if(Number(response.recordsProcessed) < 1){",
									"//     postman.setNextRequest('GET Submission status (diagnosisCodeOntology)');",
									"// }",
									"// else",
									"// {",
									"//check service returns 200",
									"pm.test(\"Record ID: \" + response.id + \" - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check number of sumbissions",
									"pm.test(\"number of samples submitted: \" + response.totalRecords, function() {",
									"    pm.expect(response.totalRecords).to.eql(environment.records15);",
									"});",
									"",
									"//Check number of errors",
									"pm.test(response.recordsFailed + \" records failed to process\", function() {",
									"    pm.expect(response.recordsFailed).to.eql(1);",
									"});",
									"",
									"//Check number of passes",
									"pm.test(response.recordsPassed + \" records were successfully processed\", function() {",
									"    pm.expect(response.recordsPassed).to.eql(1);",
									"});",
									"// }"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "bearer {{token_bu1}}"
							}
						],
						"url": {
							"raw": "{{api-url}}/status/{{id15}}",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"status",
								"{{id15}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Submission status (diagnosisCodeOntologyVersion)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//access response body",
									"let response = pm.response.json();",
									"",
									"// keep re-requesting until expected records are processed",
									"// if(Number(response.recordsProcessed) < 1){",
									"//     postman.setNextRequest('GET Submission status (diagnosisCodeOntologyVersion)');",
									"// }",
									"// else",
									"// {",
									"//check service returns 200",
									"pm.test(\"Record ID: \" + response.id + \" - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check number of sumbissions",
									"pm.test(\"number of samples submitted = \" + response.totalRecords, function() {",
									"    pm.expect(response.totalRecords).to.eql(environment.records16);",
									"});",
									"",
									"//Check number of errors",
									"pm.test(response.recordsFailed + \" records failed to process\", function() {",
									"    pm.expect(response.recordsFailed).to.eql(2);",
									"});",
									"",
									"//Check number of errors",
									"pm.test(response.recordsPassed + \" records were successfully processed\", function() {",
									"    pm.expect(response.recordsPassed).to.eql(1);",
									"});",
									"// }"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "bearer {{token_bu1}}"
							}
						],
						"url": {
							"raw": "{{api-url}}/status/{{id16}}",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"status",
								"{{id16}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Submission Status Errors",
			"item": [
				{
					"name": "GET Error code (diagnosisCode)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//access response body",
									"let response = pm.response.json();",
									"",
									"//check service returns 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Error count is \" + response.count ,function () {",
									"    pm.expect(response.count).to.eql(6);",
									"});",
									"",
									"//Check for error message for invalid data 1    ",
									"pm.test(\"Response contains reference to INVAL1\", function () {",
									"pm.expect(pm.response.text()).to.include(\"INVAL1\");",
									"});",
									"",
									"//Check for error message for invalid data 2  ",
									"pm.test(\"Response contains reference to INVAL2\", function () {",
									"pm.expect(pm.response.text()).to.include(\"INVAL2\");",
									"});",
									"    ",
									"pm.test(\"Response contains reference to INVAL2\", function () {",
									"pm.expect(pm.response.text()).to.include(\"INVAL3\");",
									"});",
									"",
									"pm.test(\"Response contains reference to INVAL2\", function () {",
									"pm.expect(pm.response.text()).to.include(\"INVAL4\");",
									"});",
									"",
									"pm.test(\"Response contains reference to INVAL2\", function () {",
									"pm.expect(pm.response.text()).to.include(\"INVAL5\");",
									"});",
									"",
									"pm.test(\"Response contains reference to INVAL2\", function () {",
									"pm.expect(pm.response.text()).to.include(\"INVAL6\");",
									"});",
									"",
									"//Check for NO error message for valid data 1",
									"pm.test(\"No errors for barcode VALID1\", function () {",
									"pm.expect(pm.response.text()).to.not.include(\"VALID1\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "bearer {{token_bu1}}"
							}
						],
						"url": {
							"raw": "{{api-url}}/status/{{id3}}/error/",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"status",
								"{{id3}}",
								"error",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Error code (diagnosisCodeOntology)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//access response body",
									"let response = pm.response.json();",
									"",
									"//check service returns 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check for error message for invalid data 1    ",
									"    pm.test(\"Error Message for barcode INVAL1\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"INVAL1\");",
									"    });",
									"",
									"//Check for NO error message for valid data 1",
									"    pm.test(\"No errors for barcode VALID1\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"VALID1\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api-url}}/status/{{id15}}/error/",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"status",
								"{{id15}}",
								"error",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Error code (diagnosisCodeOntologyVersion)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//access response body",
									"let response = pm.response.json();",
									"",
									"//check service returns 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check for error message for invalid data 1    ",
									"    pm.test(\"Error Message for barcode INVAL1\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"INVAL1\");",
									"    });",
									"    ",
									"//Check for error message for invalid data 1    ",
									"    pm.test(\"Error Message for barcode INVAL2\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"INVAL2\");",
									"    });",
									"",
									"//Check for NO error message for valid data 1",
									"    pm.test(\"No errors for barcode VALID1\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"VALID1\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "bearer {{token_bu1}}"
							}
						],
						"url": {
							"raw": "{{api-url}}/status/{{id16}}/error/",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"status",
								"{{id16}}",
								"error",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{user-token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function IsSuccessCode(statusCode) {",
					"    return statusCode == 200 || statusCode == 201;",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}