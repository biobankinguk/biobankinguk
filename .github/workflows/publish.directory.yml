# This workflow publishes build artifacts
# For the main Directory web app
# and the Data migrations bundles

# These can then be deployed, or turned into a release

name: Publish Directory

on:
  workflow_dispatch: # manual trigger
    inputs:
      build-config:
        description: Build Configuration
        required: true
        default: release
  push:
    branches: [main, support/*]

  pull_request: # TODO: testing
    branches: [main]

env:
  app-project: ./app/Directory/Directory.csproj
  migrations-project: ./lib/Data/Data.csproj
  frontend-package: frontend
  dotnet-version: 6.0.x

  publish-dir: publish
  build-config: ${{ github.event.inputs.build-config || 'release' }}

  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true

jobs:
  # Any initialisation other jobs depend on?
  # e.g. getting the version number and putting in an output for easier use
  init:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      short-sha: ${{ steps.sha.outputs.sha }}

    steps:
      - uses: actions/checkout@v3

      # short git sha for use in versions
      - name: Get short SHA
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # get app version from csproj
      - name: Read version
        id: version
        uses: bbonkr/get-version-action@v1
        with:
          project: ${{ env.app-project }}

  # publish the dotnet app
  publish-directory:
    needs: [init]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # pnpm install so we have frontend dependencies for bundling
      - uses: ./.github/actions/template.pnpm-install
        with:
          filter: ${{ env.frontend-package }}

      # dotnet publish now we have dependencies
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.dotnet-version }}

      - name: dotnet publish
        run: >-
          dotnet publish
          ${{ env.app-project }}
          -c ${{ env.build-config }}
          -o ${{ env.publish-dir }}
          -p:GitHash=${{ needs.init.outputs.short-sha }}

      # upload the published artifact
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ format('directory-{0}_dotnet-{1}', needs.init.outputs.version, env.dotnet-version) }}
          path: ${{ env.publish-dir }}

  # Publish platform native EF Core migrations bundles
  publish-migrations:
    needs: [init]
    runs-on: ubuntu-latest

    env:
      output-filename: migrate-directory-db

    strategy:
      matrix:
        include:
          - artifact: win-x64
            file-extension: ".exe"
            args: >-
              -r win-x64
          - artifact: linux-x64

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.dotnet-version }}
      - run: dotnet tool restore

      - run: >-
          dotnet ef migrations bundle
          -p ${{ env.migrations-project }}
          -s ${{ env.app-project }}
          -o ${{ format('{0}{1}', env.output-filename, matrix.file-extension) }}
          ${{ matrix.args }}

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ format('migrations-{0}_{1}', needs.init.outputs.version, matrix.artifact) }}
          path: ${{ matrix.output }}
