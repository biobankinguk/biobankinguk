// <auto-generated />
using System;
using Biobanks.Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Biobanks.Common.Migrations
{
    [DbContext(typeof(SubmissionsDbContext))]
    [Migration("20201028184535_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Biobanks.Common.Data.Entities.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message");

                    b.Property<string>("RecordIdentifiers");

                    b.Property<int>("SubmissionId");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.JoinEntities.MaterialTypeMaterialTypeGroup", b =>
                {
                    b.Property<int>("MaterialTypeId");

                    b.Property<int>("MaterialTypeGroupId");

                    b.HasKey("MaterialTypeId", "MaterialTypeGroupId");

                    b.HasIndex("MaterialTypeGroupId");

                    b.ToTable("MaterialTypeMaterialTypeGroup");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.LiveDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateDiagnosed");

                    b.Property<string>("DiagnosisCodeId")
                        .IsRequired();

                    b.Property<int>("DiagnosisCodeOntologyVersionId");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("OrganisationId");

                    b.Property<DateTimeOffset>("SubmissionTimestamp");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisCodeId");

                    b.HasIndex("DiagnosisCodeOntologyVersionId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateDiagnosed", "DiagnosisCodeId")
                        .IsUnique();

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.LiveSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgeAtDonation");

                    b.Property<string>("Barcode")
                        .IsRequired();

                    b.Property<string>("CollectionName");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("ExtractionProcedureId");

                    b.Property<string>("ExtractionSiteId");

                    b.Property<int?>("ExtractionSiteOntologyVersionId");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("MaterialTypeId");

                    b.Property<int>("OrganisationId");

                    b.Property<string>("SampleContentId");

                    b.Property<int?>("SampleContentMethodId");

                    b.Property<int?>("SexId");

                    b.Property<int?>("StorageTemperatureId");

                    b.Property<DateTimeOffset>("SubmissionTimestamp");

                    b.Property<int?>("YearOfBirth");

                    b.HasKey("Id");

                    b.HasIndex("ExtractionProcedureId");

                    b.HasIndex("ExtractionSiteId");

                    b.HasIndex("ExtractionSiteOntologyVersionId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("SampleContentId");

                    b.HasIndex("SampleContentMethodId");

                    b.HasIndex("SexId");

                    b.HasIndex("StorageTemperatureId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "Barcode", "CollectionName")
                        .IsUnique()
                        .HasFilter("[CollectionName] IS NOT NULL");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.LiveTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTreated");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("OrganisationId");

                    b.Property<DateTimeOffset>("SubmissionTimestamp");

                    b.Property<string>("TreatmentCodeId")
                        .IsRequired();

                    b.Property<int>("TreatmentCodeOntologyVersionId");

                    b.Property<int?>("TreatmentLocationId");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentCodeId");

                    b.HasIndex("TreatmentCodeOntologyVersionId");

                    b.HasIndex("TreatmentLocationId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateTreated", "TreatmentCodeId")
                        .IsUnique();

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.ReferenceData.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("MaterialTypes");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.ReferenceData.MaterialTypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("MaterialTypeGroups");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.ReferenceData.Ontology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Ontologies");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.ReferenceData.OntologyVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OntologyId");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OntologyId");

                    b.ToTable("OntologyVersions");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.ReferenceData.SampleContentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SampleContentMethods");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.ReferenceData.Sex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Sexes");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.ReferenceData.SnomedTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SnomedTags");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.ReferenceData.SnomedTerm", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Description");

                    b.Property<int?>("SnomedTagId");

                    b.HasKey("Id");

                    b.HasIndex("SnomedTagId");

                    b.ToTable("SnomedTerms");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.ReferenceData.Status", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.ReferenceData.StorageTemperature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("StorageTemperatures");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.ReferenceData.TreatmentLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TreatmentLocations");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.StagedDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateDiagnosed");

                    b.Property<string>("DiagnosisCodeId")
                        .IsRequired();

                    b.Property<int>("DiagnosisCodeOntologyVersionId");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("OrganisationId");

                    b.Property<DateTimeOffset>("SubmissionTimestamp");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisCodeId");

                    b.HasIndex("DiagnosisCodeOntologyVersionId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateDiagnosed", "DiagnosisCodeId")
                        .IsUnique();

                    b.ToTable("StagedDiagnoses");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.StagedDiagnosisDelete", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("OrganisationId");

                    b.HasKey("Id");

                    b.ToTable("StagedDiagnosisDeletes");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.StagedSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgeAtDonation");

                    b.Property<string>("Barcode")
                        .IsRequired();

                    b.Property<string>("CollectionName");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("ExtractionProcedureId");

                    b.Property<string>("ExtractionSiteId");

                    b.Property<int?>("ExtractionSiteOntologyVersionId");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("MaterialTypeId");

                    b.Property<int>("OrganisationId");

                    b.Property<string>("SampleContentId");

                    b.Property<int?>("SampleContentMethodId");

                    b.Property<int?>("SexId");

                    b.Property<int?>("StorageTemperatureId");

                    b.Property<DateTimeOffset>("SubmissionTimestamp");

                    b.Property<int?>("YearOfBirth");

                    b.HasKey("Id");

                    b.HasIndex("ExtractionProcedureId");

                    b.HasIndex("ExtractionSiteId");

                    b.HasIndex("ExtractionSiteOntologyVersionId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("SampleContentId");

                    b.HasIndex("SampleContentMethodId");

                    b.HasIndex("SexId");

                    b.HasIndex("StorageTemperatureId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "Barcode", "CollectionName")
                        .IsUnique()
                        .HasFilter("[CollectionName] IS NOT NULL");

                    b.ToTable("StagedSamples");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.StagedSampleDelete", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("OrganisationId");

                    b.HasKey("Id");

                    b.ToTable("StagedSampleDeletes");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.StagedTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTreated");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("OrganisationId");

                    b.Property<DateTimeOffset>("SubmissionTimestamp");

                    b.Property<string>("TreatmentCodeId")
                        .IsRequired();

                    b.Property<int>("TreatmentCodeOntologyVersionId");

                    b.Property<int?>("TreatmentLocationId");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentCodeId");

                    b.HasIndex("TreatmentCodeOntologyVersionId");

                    b.HasIndex("TreatmentLocationId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateTreated", "TreatmentCodeId")
                        .IsUnique();

                    b.ToTable("StagedTreatments");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.StagedTreatmentDelete", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("OrganisationId");

                    b.HasKey("Id");

                    b.ToTable("StagedTreatmentDeletes");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BiobankId");

                    b.Property<int>("RecordsProcessed");

                    b.Property<DateTime>("StatusChangeTimestamp");

                    b.Property<int>("StatusId");

                    b.Property<DateTime>("SubmissionTimestamp");

                    b.Property<int>("TotalRecords");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.Error", b =>
                {
                    b.HasOne("Biobanks.Common.Data.Entities.Submission", "Submission")
                        .WithMany("Errors")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.JoinEntities.MaterialTypeMaterialTypeGroup", b =>
                {
                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.MaterialTypeGroup", "MaterialTypeGroup")
                        .WithMany("MaterialTypeMaterialTypeGroups")
                        .HasForeignKey("MaterialTypeGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.MaterialType", "MaterialType")
                        .WithMany("MaterialTypeMaterialTypeGroups")
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.LiveDiagnosis", b =>
                {
                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.SnomedTerm", "DiagnosisCode")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.OntologyVersion", "DiagnosisCodeOntologyVersion")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodeOntologyVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.LiveSample", b =>
                {
                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.SnomedTerm", "ExtractionProcedure")
                        .WithMany()
                        .HasForeignKey("ExtractionProcedureId");

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.SnomedTerm", "ExtractionSite")
                        .WithMany()
                        .HasForeignKey("ExtractionSiteId");

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.OntologyVersion", "ExtractionSiteOntologyVersion")
                        .WithMany()
                        .HasForeignKey("ExtractionSiteOntologyVersionId");

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.SnomedTerm", "SampleContent")
                        .WithMany()
                        .HasForeignKey("SampleContentId");

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.SampleContentMethod", "SampleContentMethod")
                        .WithMany()
                        .HasForeignKey("SampleContentMethodId");

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.Sex", "Sex")
                        .WithMany()
                        .HasForeignKey("SexId");

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.StorageTemperature", "StorageTemperature")
                        .WithMany()
                        .HasForeignKey("StorageTemperatureId");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.LiveTreatment", b =>
                {
                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.SnomedTerm", "TreatmentCode")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.OntologyVersion", "TreatmentCodeOntologyVersion")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeOntologyVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.TreatmentLocation", "TreatmentLocation")
                        .WithMany()
                        .HasForeignKey("TreatmentLocationId");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.ReferenceData.OntologyVersion", b =>
                {
                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.Ontology", "Ontology")
                        .WithMany("OntologyVersions")
                        .HasForeignKey("OntologyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.ReferenceData.SnomedTerm", b =>
                {
                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.SnomedTag", "SnomedTag")
                        .WithMany("SnomedTerms")
                        .HasForeignKey("SnomedTagId");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.StagedDiagnosis", b =>
                {
                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.SnomedTerm", "DiagnosisCode")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.OntologyVersion", "DiagnosisCodeOntologyVersion")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodeOntologyVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.StagedSample", b =>
                {
                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.SnomedTerm", "ExtractionProcedure")
                        .WithMany()
                        .HasForeignKey("ExtractionProcedureId");

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.SnomedTerm", "ExtractionSite")
                        .WithMany()
                        .HasForeignKey("ExtractionSiteId");

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.OntologyVersion", "ExtractionSiteOntologyVersion")
                        .WithMany()
                        .HasForeignKey("ExtractionSiteOntologyVersionId");

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.SnomedTerm", "SampleContent")
                        .WithMany()
                        .HasForeignKey("SampleContentId");

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.SampleContentMethod", "SampleContentMethod")
                        .WithMany()
                        .HasForeignKey("SampleContentMethodId");

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.Sex", "Sex")
                        .WithMany()
                        .HasForeignKey("SexId");

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.StorageTemperature", "StorageTemperature")
                        .WithMany()
                        .HasForeignKey("StorageTemperatureId");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.StagedTreatment", b =>
                {
                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.SnomedTerm", "TreatmentCode")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.OntologyVersion", "TreatmentCodeOntologyVersion")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeOntologyVersionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.TreatmentLocation", "TreatmentLocation")
                        .WithMany()
                        .HasForeignKey("TreatmentLocationId");
                });

            modelBuilder.Entity("Biobanks.Common.Data.Entities.Submission", b =>
                {
                    b.HasOne("Biobanks.Common.Data.Entities.ReferenceData.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
