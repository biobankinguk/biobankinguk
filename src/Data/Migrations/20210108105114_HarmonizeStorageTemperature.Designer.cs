// <auto-generated />
using System;
using Biobanks.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Biobanks.Data.Migrations
{
    [DbContext(typeof(SubmissionsDbContext))]
    [Migration("20210108105114_HarmonizeStorageTemperature")]
    partial class HarmonizeStorageTemperature
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Entities.Api.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordIdentifiers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("Entities.Api.LiveDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateDiagnosed")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisCodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiagnosisCodeOntologyVersionId")
                        .HasColumnType("int");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisCodeId");

                    b.HasIndex("DiagnosisCodeOntologyVersionId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateDiagnosed", "DiagnosisCodeId")
                        .IsUnique();

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("Entities.Api.LiveSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AgeAtDonation")
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CollectionName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("ExtractionProcedureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExtractionSiteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ExtractionSiteOntologyVersionId")
                        .HasColumnType("int");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("SampleContentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SampleContentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("SexId")
                        .HasColumnType("int");

                    b.Property<int?>("StorageTemperatureId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("YearOfBirth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExtractionProcedureId");

                    b.HasIndex("ExtractionSiteId");

                    b.HasIndex("ExtractionSiteOntologyVersionId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("SampleContentId");

                    b.HasIndex("SampleContentMethodId");

                    b.HasIndex("SexId");

                    b.HasIndex("StorageTemperatureId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "Barcode", "CollectionName")
                        .IsUnique()
                        .HasFilter("[CollectionName] IS NOT NULL");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Entities.Api.LiveTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TreatmentCodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TreatmentCodeOntologyVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("TreatmentLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentCodeId");

                    b.HasIndex("TreatmentCodeOntologyVersionId");

                    b.HasIndex("TreatmentLocationId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateTreated", "TreatmentCodeId")
                        .IsUnique();

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("Entities.Api.ReferenceData.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaterialTypes");
                });

            modelBuilder.Entity("Entities.Api.ReferenceData.MaterialTypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaterialTypeGroups");
                });

            modelBuilder.Entity("Entities.Api.ReferenceData.Ontology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ontologies");
                });

            modelBuilder.Entity("Entities.Api.ReferenceData.OntologyVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("OntologyId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OntologyId");

                    b.ToTable("OntologyVersions");
                });

            modelBuilder.Entity("Entities.Api.ReferenceData.SampleContentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SampleContentMethods");
                });

            modelBuilder.Entity("Entities.Api.ReferenceData.SnomedTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SnomedTags");
                });

            modelBuilder.Entity("Entities.Api.ReferenceData.SnomedTerm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SnomedTagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SnomedTagId");

                    b.ToTable("SnomedTerms");
                });

            modelBuilder.Entity("Entities.Api.ReferenceData.Status", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Entities.Api.ReferenceData.TreatmentLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TreatmentLocations");
                });

            modelBuilder.Entity("Entities.Api.StagedDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateDiagnosed")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisCodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiagnosisCodeOntologyVersionId")
                        .HasColumnType("int");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisCodeId");

                    b.HasIndex("DiagnosisCodeOntologyVersionId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateDiagnosed", "DiagnosisCodeId")
                        .IsUnique();

                    b.ToTable("StagedDiagnoses");
                });

            modelBuilder.Entity("Entities.Api.StagedDiagnosisDelete", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StagedDiagnosisDeletes");
                });

            modelBuilder.Entity("Entities.Api.StagedSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AgeAtDonation")
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CollectionName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("ExtractionProcedureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExtractionSiteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ExtractionSiteOntologyVersionId")
                        .HasColumnType("int");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("SampleContentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SampleContentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("SexId")
                        .HasColumnType("int");

                    b.Property<int?>("StorageTemperatureId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("YearOfBirth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExtractionProcedureId");

                    b.HasIndex("ExtractionSiteId");

                    b.HasIndex("ExtractionSiteOntologyVersionId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("SampleContentId");

                    b.HasIndex("SampleContentMethodId");

                    b.HasIndex("SexId");

                    b.HasIndex("StorageTemperatureId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "Barcode", "CollectionName")
                        .IsUnique()
                        .HasFilter("[CollectionName] IS NOT NULL");

                    b.ToTable("StagedSamples");
                });

            modelBuilder.Entity("Entities.Api.StagedSampleDelete", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StagedSampleDeletes");
                });

            modelBuilder.Entity("Entities.Api.StagedTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TreatmentCodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TreatmentCodeOntologyVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("TreatmentLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentCodeId");

                    b.HasIndex("TreatmentCodeOntologyVersionId");

                    b.HasIndex("TreatmentLocationId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateTreated", "TreatmentCodeId")
                        .IsUnique();

                    b.ToTable("StagedTreatments");
                });

            modelBuilder.Entity("Entities.Api.StagedTreatmentDelete", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StagedTreatmentDeletes");
                });

            modelBuilder.Entity("Entities.Api.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BiobankId")
                        .HasColumnType("int");

                    b.Property<int>("RecordsProcessed")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusChangeTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalRecords")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Entities.Shared.ReferenceData.Sex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sexes");
                });

            modelBuilder.Entity("Entities.Shared.ReferenceData.StorageTemperature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StorageTemperatures");
                });

            modelBuilder.Entity("MaterialTypeMaterialTypeGroup", b =>
                {
                    b.Property<int>("MaterialTypeGroupsId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialTypesId")
                        .HasColumnType("int");

                    b.HasKey("MaterialTypeGroupsId", "MaterialTypesId");

                    b.HasIndex("MaterialTypesId");

                    b.ToTable("MaterialTypeMaterialTypeGroup");
                });

            modelBuilder.Entity("Entities.Api.Error", b =>
                {
                    b.HasOne("Entities.Api.Submission", "Submission")
                        .WithMany("Errors")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Entities.Api.LiveDiagnosis", b =>
                {
                    b.HasOne("Entities.Api.ReferenceData.SnomedTerm", "DiagnosisCode")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Api.ReferenceData.OntologyVersion", "DiagnosisCodeOntologyVersion")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodeOntologyVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosisCode");

                    b.Navigation("DiagnosisCodeOntologyVersion");
                });

            modelBuilder.Entity("Entities.Api.LiveSample", b =>
                {
                    b.HasOne("Entities.Api.ReferenceData.SnomedTerm", "ExtractionProcedure")
                        .WithMany()
                        .HasForeignKey("ExtractionProcedureId");

                    b.HasOne("Entities.Api.ReferenceData.SnomedTerm", "ExtractionSite")
                        .WithMany()
                        .HasForeignKey("ExtractionSiteId");

                    b.HasOne("Entities.Api.ReferenceData.OntologyVersion", "ExtractionSiteOntologyVersion")
                        .WithMany()
                        .HasForeignKey("ExtractionSiteOntologyVersionId");

                    b.HasOne("Entities.Api.ReferenceData.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Api.ReferenceData.SnomedTerm", "SampleContent")
                        .WithMany()
                        .HasForeignKey("SampleContentId");

                    b.HasOne("Entities.Api.ReferenceData.SampleContentMethod", "SampleContentMethod")
                        .WithMany()
                        .HasForeignKey("SampleContentMethodId");

                    b.HasOne("Entities.Shared.ReferenceData.Sex", "Sex")
                        .WithMany()
                        .HasForeignKey("SexId");

                    b.HasOne("Entities.Shared.ReferenceData.StorageTemperature", "StorageTemperature")
                        .WithMany()
                        .HasForeignKey("StorageTemperatureId");

                    b.Navigation("ExtractionProcedure");

                    b.Navigation("ExtractionSite");

                    b.Navigation("ExtractionSiteOntologyVersion");

                    b.Navigation("MaterialType");

                    b.Navigation("SampleContent");

                    b.Navigation("SampleContentMethod");

                    b.Navigation("Sex");

                    b.Navigation("StorageTemperature");
                });

            modelBuilder.Entity("Entities.Api.LiveTreatment", b =>
                {
                    b.HasOne("Entities.Api.ReferenceData.SnomedTerm", "TreatmentCode")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Api.ReferenceData.OntologyVersion", "TreatmentCodeOntologyVersion")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeOntologyVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Api.ReferenceData.TreatmentLocation", "TreatmentLocation")
                        .WithMany()
                        .HasForeignKey("TreatmentLocationId");

                    b.Navigation("TreatmentCode");

                    b.Navigation("TreatmentCodeOntologyVersion");

                    b.Navigation("TreatmentLocation");
                });

            modelBuilder.Entity("Entities.Api.ReferenceData.OntologyVersion", b =>
                {
                    b.HasOne("Entities.Api.ReferenceData.Ontology", "Ontology")
                        .WithMany("OntologyVersions")
                        .HasForeignKey("OntologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ontology");
                });

            modelBuilder.Entity("Entities.Api.ReferenceData.SnomedTerm", b =>
                {
                    b.HasOne("Entities.Api.ReferenceData.SnomedTag", "SnomedTag")
                        .WithMany("SnomedTerms")
                        .HasForeignKey("SnomedTagId");

                    b.Navigation("SnomedTag");
                });

            modelBuilder.Entity("Entities.Api.StagedDiagnosis", b =>
                {
                    b.HasOne("Entities.Api.ReferenceData.SnomedTerm", "DiagnosisCode")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Api.ReferenceData.OntologyVersion", "DiagnosisCodeOntologyVersion")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodeOntologyVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosisCode");

                    b.Navigation("DiagnosisCodeOntologyVersion");
                });

            modelBuilder.Entity("Entities.Api.StagedSample", b =>
                {
                    b.HasOne("Entities.Api.ReferenceData.SnomedTerm", "ExtractionProcedure")
                        .WithMany()
                        .HasForeignKey("ExtractionProcedureId");

                    b.HasOne("Entities.Api.ReferenceData.SnomedTerm", "ExtractionSite")
                        .WithMany()
                        .HasForeignKey("ExtractionSiteId");

                    b.HasOne("Entities.Api.ReferenceData.OntologyVersion", "ExtractionSiteOntologyVersion")
                        .WithMany()
                        .HasForeignKey("ExtractionSiteOntologyVersionId");

                    b.HasOne("Entities.Api.ReferenceData.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Api.ReferenceData.SnomedTerm", "SampleContent")
                        .WithMany()
                        .HasForeignKey("SampleContentId");

                    b.HasOne("Entities.Api.ReferenceData.SampleContentMethod", "SampleContentMethod")
                        .WithMany()
                        .HasForeignKey("SampleContentMethodId");

                    b.HasOne("Entities.Shared.ReferenceData.Sex", "Sex")
                        .WithMany()
                        .HasForeignKey("SexId");

                    b.HasOne("Entities.Shared.ReferenceData.StorageTemperature", "StorageTemperature")
                        .WithMany()
                        .HasForeignKey("StorageTemperatureId");

                    b.Navigation("ExtractionProcedure");

                    b.Navigation("ExtractionSite");

                    b.Navigation("ExtractionSiteOntologyVersion");

                    b.Navigation("MaterialType");

                    b.Navigation("SampleContent");

                    b.Navigation("SampleContentMethod");

                    b.Navigation("Sex");

                    b.Navigation("StorageTemperature");
                });

            modelBuilder.Entity("Entities.Api.StagedTreatment", b =>
                {
                    b.HasOne("Entities.Api.ReferenceData.SnomedTerm", "TreatmentCode")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Api.ReferenceData.OntologyVersion", "TreatmentCodeOntologyVersion")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeOntologyVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Api.ReferenceData.TreatmentLocation", "TreatmentLocation")
                        .WithMany()
                        .HasForeignKey("TreatmentLocationId");

                    b.Navigation("TreatmentCode");

                    b.Navigation("TreatmentCodeOntologyVersion");

                    b.Navigation("TreatmentLocation");
                });

            modelBuilder.Entity("Entities.Api.Submission", b =>
                {
                    b.HasOne("Entities.Api.ReferenceData.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MaterialTypeMaterialTypeGroup", b =>
                {
                    b.HasOne("Entities.Api.ReferenceData.MaterialTypeGroup", null)
                        .WithMany()
                        .HasForeignKey("MaterialTypeGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Api.ReferenceData.MaterialType", null)
                        .WithMany()
                        .HasForeignKey("MaterialTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Api.ReferenceData.Ontology", b =>
                {
                    b.Navigation("OntologyVersions");
                });

            modelBuilder.Entity("Entities.Api.ReferenceData.SnomedTag", b =>
                {
                    b.Navigation("SnomedTerms");
                });

            modelBuilder.Entity("Entities.Api.Submission", b =>
                {
                    b.Navigation("Errors");
                });
#pragma warning restore 612, 618
        }
    }
}
