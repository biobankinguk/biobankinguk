// <auto-generated />
using System;
using Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Upload.Common.Migrations
{
    [DbContext(typeof(UploadContext))]
    partial class UploadContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0-preview1.19506.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Common.Data.Upload.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordIdentifiers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("Common.Data.Upload.LiveDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateDiagnosed")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisCodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiagnosisCodeOntologyVersionId")
                        .HasColumnType("int");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisCodeId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateDiagnosed", "DiagnosisCodeId")
                        .IsUnique();

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("Common.Data.Upload.LiveSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgeAtDonation")
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CollectionName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("ExtractionProcedureId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtractionSiteId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExtractionSiteOntologyVersionId")
                        .HasColumnType("int");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("SampleContentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SampleContentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("SexId")
                        .HasColumnType("int");

                    b.Property<int?>("StorageTemperatureId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("YearOfBirth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "Barcode", "CollectionName")
                        .IsUnique()
                        .HasFilter("[CollectionName] IS NOT NULL");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Common.Data.Upload.LiveTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TreatmentCodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TreatmentCodeOntologyVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("TreatmentLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateTreated", "TreatmentCodeId")
                        .IsUnique();

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("Common.Data.Upload.StagedDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateDiagnosed")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisCodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiagnosisCodeOntologyVersionId")
                        .HasColumnType("int");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisCodeId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateDiagnosed", "DiagnosisCodeId")
                        .IsUnique();

                    b.ToTable("StagedDiagnoses");
                });

            modelBuilder.Entity("Common.Data.Upload.StagedDiagnosisDelete", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StagedDiagnosisDeletes");
                });

            modelBuilder.Entity("Common.Data.Upload.StagedSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgeAtDonation")
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CollectionName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("ExtractionProcedureId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtractionSiteId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExtractionSiteOntologyVersionId")
                        .HasColumnType("int");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("SampleContentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SampleContentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("SexId")
                        .HasColumnType("int");

                    b.Property<int?>("StorageTemperatureId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("YearOfBirth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "Barcode", "CollectionName")
                        .IsUnique()
                        .HasFilter("[CollectionName] IS NOT NULL");

                    b.ToTable("StagedSamples");
                });

            modelBuilder.Entity("Common.Data.Upload.StagedSampleDelete", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StagedSampleDeletes");
                });

            modelBuilder.Entity("Common.Data.Upload.StagedTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TreatmentCodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TreatmentCodeOntologyVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("TreatmentLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateTreated", "TreatmentCodeId")
                        .IsUnique();

                    b.ToTable("StagedTreatments");
                });

            modelBuilder.Entity("Common.Data.Upload.StagedTreatmentDelete", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StagedTreatmentDeletes");
                });

            modelBuilder.Entity("Common.Data.Upload.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BiobankId")
                        .HasColumnType("int");

                    b.Property<int>("RecordsProcessed")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusChangeTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalRecords")
                        .HasColumnType("int");

                    b.Property<int?>("UploadStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UploadStatusId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Common.Data.Upload.UploadStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UploadStatuses");
                });

            modelBuilder.Entity("Upload.Common.Models.OmopTerm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OmopTerm");
                });

            modelBuilder.Entity("Common.Data.Upload.Error", b =>
                {
                    b.HasOne("Common.Data.Upload.Submission", "Submission")
                        .WithMany("Errors")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Data.Upload.LiveDiagnosis", b =>
                {
                    b.HasOne("Upload.Common.Models.OmopTerm", "DiagnosisCode")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Data.Upload.StagedDiagnosis", b =>
                {
                    b.HasOne("Upload.Common.Models.OmopTerm", "DiagnosisCode")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Data.Upload.Submission", b =>
                {
                    b.HasOne("Common.Data.Upload.UploadStatus", "UploadStatus")
                        .WithMany()
                        .HasForeignKey("UploadStatusId");
                });
#pragma warning restore 612, 618
        }
    }
}
