@using System.Web.Optimization
@model Biobanks.Web.Models.Biobank.SubmissionsModel

@{
    ViewBag.Title = "Submissions";
}

@Html.Partial("_BiobankTabs", "Submissions")

<h2>
    @ViewBag.Title
</h2>

<p>
    If you need to bulk submit data, instructions on how to interact with the submissions API can be
    found here (todo link).
</p>

<h3>Default values</h3>
<p>When samples are imported, default values need setting.</p>

@using (@Html.BeginForm(
            "Submissions",
            "Biobank"))
{
    @Html.AntiForgeryToken()
    @Html.EditorFor(x => x.BiobankId)
    <div class="form-group">
        <div class="col-sm-10 col-sm-offset-1">
            <h4 class="required">
                @Html.DisplayNameFor(x => x.AccessCondition)
                <span class="fa fa-info-circle help-icon-button help-icon-for-label help-label-collection-accesscondition"></span>
            </h4>
        </div>
        <div class="col-sm-10 col-sm-offset-2">
            <div class="col-sm-6">
                @for (var i = 0; i < Model.AccessConditions.Count(); i++)
                {
                    var accessCondition = Model.AccessConditions.ElementAt(i);

                    <div class="radio">
                        <label>
                            @Html.RadioButtonFor(x => x.AccessCondition, accessCondition.Id,
                                accessCondition.Id == Model.AccessCondition ? new { @checked = "checked" } : null)
                            @Html.Raw(accessCondition.Description)
                        </label>
                    </div>

                    if (i == Math.Ceiling((decimal)Model.AccessConditions.Count() / 2) - 1)
                    {
                        @Html.Raw("</div>\n<div class=\"col-sm-6\">")
                    }
                }
            </div>
            @Html.ValidationMessageFor(x => x.AccessCondition)
        </div>
    </div>

    <div class="form-group">
        <div class="col-sm-10 col-sm-offset-1">
            <h4 class="required">
                @Html.DisplayNameFor(x => x.CollectionType)
                <span class="fa fa-info-circle help-icon-button help-icon-for-label help-label-collection-collectiontype"></span>
            </h4>
        </div>
        <div class="col-sm-10 col-sm-offset-2">
            <div class="col-sm-6">
                @for (var i = 0; i < Model.CollectionTypes.Count(); i++)
                {
                    var collectionType = Model.CollectionTypes.ElementAt(i);

                    <div class="radio">
                        <label>
                            @Html.RadioButtonFor(x => x.CollectionType, collectionType.Id,
                                collectionType.Id == Model.CollectionType ? new { @checked = "checked" } : null)
                            @Html.Raw(collectionType.Description)
                        </label>
                    </div>

                    if (i == Math.Ceiling((decimal)Model.CollectionTypes.Count() / 2) - 1)
                    {
                        @Html.Raw("</div>\n<div class=\"col-sm-6\">")
                    }
                }
            </div>
            <div class="col-sm-12">
                @Html.ValidationMessageFor(x => x.CollectionType)
            </div>
        </div>
    </div>

    <div class="form-group row">
        <div class="col-sm-10">
            <button type="submit" name="submit" class="btn btn-primary pull-right">Save Changes</button>
        </div>
    </div>

    //Using the same form forces the user to set default values before generating api credentials
    <h3>Submission API Authentication</h3>
    <div class="row form-group">
        <div class="col-sm-2 col-sm-offset-1">
            <h4>
                @Html.DisplayNameFor(x => x.PublicKey)
                <span class="fa fa-info-circle help-icon-button help-icon-for-label help-label-submissions-publickey"></span>
            </h4>
        </div>
        <div class="col-sm-5">
            <input type="text" id="PublicKey" name="PublicKey" value=@Model.PublicKey class="form-control" readonly="readonly" />
        </div>
        <div class="col-sm-2">
            <button data-target="PublicKey" class="copy-text btn btn-default">Copy</button>
        </div>
        @if (Model.PublicKey != null)
        {
            <div class="col-sm-10 col-sm-offset-1 alert-container">
                <div class="alert alert-warning">
                    <label>Generating a new private key will override your previous key and display a new private key. Your public key will remain unchanged.</label>
                </div>
            </div>
        }
    </div>
    if (Model.PrivateKey != null)
    {
        <div class="row form-group">
            <div class="col-sm-2 col-sm-offset-1">
                <h4>
                    @Html.DisplayNameFor(x => x.PrivateKey)
                    <span class="fa fa-info-circle help-icon-button help-icon-for-label help-label-submissions-privatekey"></span>
                </h4>
            </div>
            <div class="col-sm-5">
                <input type="text" id="PrivateKey" name="PrivateKey" value=@Model.PrivateKey class="form-control" readonly="readonly" />
            </div>
            <div class="col-sm-2">
                <button data-target="PrivateKey" class="copy-text btn btn-default">Copy</button>
            </div>
            <div class="col-sm-10 col-sm-offset-1 alert-container">
                <div class="alert alert-warning">
                    <label>This private key will be displayed only once! You are advised to copy it now and store it in a safe place.</label>
                </div>
            </div>
        </div>
    }
    <div class="form-group row">
        <div class="col-sm-10">
            <button type="submit" name="generatekey" value="true" class="btn btn-success pull-right"> Generate New Private Key </button>
        </div>
    </div>
}

@section FooterScripts
{
    @Scripts.Render("~/bundles/help-buttons")
    @Scripts.Render("~/bundles/biobank/submissions")
}