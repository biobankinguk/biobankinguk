@using System.Web.Optimization
@using Newtonsoft.Json
@model Biobanks.Web.Models.Biobank.AddSampleSetModel
@{
    ViewBag.Title = "Add sample set";
}

@section FooterScripts
{
    @Scripts.Render("~/bundles/datatables")
    @Scripts.Render("~/bundles/collection-sample-sets")
    @Scripts.Render("~/bundles/help-buttons")

<script>
        $(function () {
            // Donor Count
            lookup.donorCounts(ko.utils.arrayMap(@Html.Raw(JsonConvert.SerializeObject(Model.DonorCounts)), function (x) {
                return new RadioBinding(x.Id, x.Description, x.SortOrder);
            }));

            sampleSetVM.donorCount(@Html.Raw(Model.DonorCountSliderPosition));

            // Material Type
            lookup.materialTypes(ko.utils.arrayMap(@Html.Raw(JsonConvert.SerializeObject(Model.MaterialTypes)), function (x) {
                return new RadioBinding(x.Id, x.Description, x.SortOrder);
            }));

            // Extraction Procedures
            lookup.extractionProcedures(ko.utils.arrayMap(@Html.Raw(JsonConvert.SerializeObject(Model.ExtractionProcedures)), function (x) {
                return new DropDownBinding(x.OntologyTermId, x.Description);
            }));
            lookup.materialExtractionProcedures(lookup.extractionProcedures());

            // Preservation Types
            lookup.preservationTypes(ko.utils.arrayMap(@Html.Raw(JsonConvert.SerializeObject(Model.PreservationTypes)), function (x) {
                return new RadioBinding(x.Id, x.Description, x.SortOrder);
            }));

            // Storage Temperature
			lookup.storageTemperatures(ko.utils.arrayMap(@Html.Raw(JsonConvert.SerializeObject(Model.StorageTemperatures)), function (x) {
                return new RadioBinding(x.Id, x.Description, x.SortOrder);
            }));

            // Percentage
            lookup.percentages(ko.utils.arrayMap(@Html.Raw(JsonConvert.SerializeObject(Model.Percentages)), function (x) {
                return new RadioBinding(x.Id, x.Description, x.SortOrder);
            }));

            // Macroscopic Assessment
            lookup.macroscopicAssessments(ko.utils.arrayMap(@Html.Raw(JsonConvert.SerializeObject(Model.MacroscopicAssessments)), function(x) {
                return new RadioBinding(x.Id, x.Description, x.SortOrder);
            }));

			// Select only value as default
			if (lookup.macroscopicAssessments().length == 1) {
				sampleSetVM.modal.materialPreservationDetail().macroscopicAssessment(
					lookup.macroscopicAssessments()[0].value
				)
			}

            // Material Preservation Details
            @if (!string.IsNullOrEmpty(Model.MaterialPreservationDetailsJson))
            {
                @:sampleSetVM.materialPreservationDetails(ko.utils.arrayMap(@Html.Raw(Model.MaterialPreservationDetailsJson), function(x)
                @:{
                @:    return new MaterialPreservationDetail(x.materialType, x.preservationTypes, x.storageTemperatures, x.percentage, x.macroscopicAssessment, x.extractionProcedure);
                @:}));
            }
        });
</script>
}

<h2>@ViewBag.Title</h2>

@if ((bool)ViewData["CollectionApiStatus"] == false)
{

    using (Html.BeginForm("AddSampleSet", "Biobank", FormMethod.Post, new { @class = "form-horizontal" }))
    {
        @Html.AntiForgeryToken()

        @Html.Partial("_SampleSetSharedFields")

        <div class="form-group">
            <div class="col-sm-12 text-center">
                @Html.ActionLink("Cancel", "Collection", new { id = Model.CollectionId }, new { @class = "btn btn-default" })
                <button type="submit" class="btn btn-primary">Create sample set</button>
            </div>
        </div>
    }
}
else
{
    <h3>This sample set is locked.</h3>
}