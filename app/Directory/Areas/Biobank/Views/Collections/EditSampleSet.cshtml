@using Newtonsoft.Json
@model Biobanks.Directory.Areas.Biobank.Models.Collections.EditSampleSetModel

@{
    ViewBag.Title = "Edit sample set";
}

@section FooterScripts
{
    <script src="~/dist/js/Biobank/collection-sample-sets.min.js" asp-append-version="true"></script>
    <script src="~/dist/js/Biobank/help-buttons.min.js" asp-append-version="true"></script>

    <script>
        $(function () {
            // Donor Count
            lookup.donorCounts(ko.utils.arrayMap(@Html.Raw(JsonConvert.SerializeObject(Model.DonorCounts)), function (x) {
                return new RadioBinding(x.Id, x.Description, x.SortOrder);
            }));

            sampleSetVM.donorCount(@Html.Raw(Model.DonorCountSliderPosition));

            // Material Type
            lookup.materialTypes(ko.utils.arrayMap(@Html.Raw(JsonConvert.SerializeObject(Model.MaterialTypes)), function (x) {
                return new RadioBinding(x.Id, x.Description, x.SortOrder);
            }));

            // Extraction Procedures
            var extractionProcedures = @Html.Raw(JsonConvert.SerializeObject(Model.ExtractionProcedures));
            if (extractionProcedures.length > 0) {
                lookup.extractionProcedures(ko.utils.arrayMap(extractionProcedures, function (x) {
                    return new RadioBinding(x.OntologyTermId, x.Description);
                }));
                lookup.materialExtractionProcedures(lookup.extractionProcedures());
            }

            // Preservation Types
            lookup.preservationTypes(ko.utils.arrayMap(@Html.Raw(JsonConvert.SerializeObject(Model.PreservationTypes)), function (x) {
                return new RadioBinding(x.Id, x.Description, x.SortOrder);
            }));

            // Storage Temperature
            lookup.storageTemperatures(ko.utils.arrayMap(@Html.Raw(JsonConvert.SerializeObject(Model.StorageTemperatures)), function (x) {
                return new RadioBinding(x.Id, x.Description, x.SortOrder);
            }));

            // Percentage
            lookup.percentages(ko.utils.arrayMap(@Html.Raw(JsonConvert.SerializeObject(Model.Percentages)), function (x) {
                return new RadioBinding(x.Id, x.Description, x.SortOrder);
            }));

            // Macroscopic Assessment
            lookup.macroscopicAssessments(ko.utils.arrayMap(@Html.Raw(JsonConvert.SerializeObject(Model.MacroscopicAssessments)), function(x) {
                return new RadioBinding(x.Id, x.Description, x.SortOrder);
            }));

            // Select only value as default
            if (lookup.macroscopicAssessments().length == 1) {
                sampleSetVM.modal.materialPreservationDetail().macroscopicAssessment(
                    lookup.macroscopicAssessments()[0].value
                )
            }

            // Material Preservation Details
            @if (Model.MaterialPreservationDetails.Count > 0)
            {
                @:sampleSetVM.materialPreservationDetails(ko.utils.arrayMap(@Html.Raw(Model.MaterialPreservationDetailsJson), function(x)
                @:{
                @:    return new MaterialPreservationDetail(
                @:      x.id,
                @:      x.materialType,
                @:      x.preservationType,
                @:      x.storageTemperature,
                @:      x.percentage,
                @:      x.macroscopicAssessment,
                @:      x.extractionProcedure)
                @:}));
            }
        });
</script>
}



<h2>@ViewBag.Title</h2>


@if ((bool)ViewData["CollectionApiStatus"] == false)
{
    using (Html.BeginForm("EditSampleSet", "Collections", FormMethod.Post, new { @class = "form-horizontal" }))
    {
        @Html.AntiForgeryToken()
        
        @await Html.PartialAsync("_SampleSetSharedFields", Model)

        <div class="form-group">
            <div class="col-sm-12 text-center">
                @Html.ActionLink("Cancel", "SampleSet", new { biobankId = ViewContext.RouteData.Values["biobankId"], id = Model.Id }, new { @class = "btn btn-default" })
                @Html.HiddenFor(x => x.Id)
                @Html.HiddenFor(x => x.CollectionId)
                <button type="submit" class="btn btn-primary">Update sample set</button>
            </div>
        </div>
    }
}
else
{
    <h3>This sample set is locked for editing.</h3>
}
