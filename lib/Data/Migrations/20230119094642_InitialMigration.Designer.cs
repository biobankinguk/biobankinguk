// <auto-generated />
using System;
using Biobanks.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Biobanks.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230119094642_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnnotationPublication", b =>
                {
                    b.Property<int>("AnnotationsId")
                        .HasColumnType("integer");

                    b.Property<int>("PublicationsId")
                        .HasColumnType("integer");

                    b.HasKey("AnnotationsId", "PublicationsId");

                    b.HasIndex("PublicationsId");

                    b.ToTable("AnnotationPublication");
                });

            modelBuilder.Entity("ApiClientOrganisation", b =>
                {
                    b.Property<int>("ApiClientsId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationsOrganisationId")
                        .HasColumnType("integer");

                    b.HasKey("ApiClientsId", "OrganisationsOrganisationId");

                    b.HasIndex("OrganisationsOrganisationId");

                    b.ToTable("ApiClientOrganisation");
                });

            modelBuilder.Entity("AssociatedDataTypeOntologyTerm", b =>
                {
                    b.Property<int>("AssociatedDataTypesId")
                        .HasColumnType("integer");

                    b.Property<string>("OntologyTermsId")
                        .HasColumnType("character varying(20)");

                    b.HasKey("AssociatedDataTypesId", "OntologyTermsId");

                    b.HasIndex("OntologyTermsId");

                    b.ToTable("AssociatedDataTypeOntologyTerm");
                });

            modelBuilder.Entity("Biobanks.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Biobanks.Entities.Api.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("RecordIdentifiers")
                        .HasColumnType("text");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.LiveDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateDiagnosed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DiagnosisCodeId")
                        .IsRequired()
                        .HasColumnType("character varying(20)");

                    b.Property<int>("DiagnosisCodeOntologyVersionId")
                        .HasColumnType("integer");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisCodeId");

                    b.HasIndex("DiagnosisCodeOntologyVersionId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateDiagnosed", "DiagnosisCodeId")
                        .IsUnique();

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.LiveSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeAtDonation")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CollectionName")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("ExtractionProcedureId")
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ExtractionSiteId")
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("ExtractionSiteOntologyVersionId")
                        .HasColumnType("integer");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDirty")
                        .HasColumnType("boolean");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreservationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("SampleContentId")
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("SampleContentMethodId")
                        .HasColumnType("integer");

                    b.Property<int?>("SexId")
                        .HasColumnType("integer");

                    b.Property<int?>("StorageTemperatureId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("YearOfBirth")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExtractionProcedureId");

                    b.HasIndex("ExtractionSiteId");

                    b.HasIndex("ExtractionSiteOntologyVersionId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("PreservationTypeId");

                    b.HasIndex("SampleContentId");

                    b.HasIndex("SampleContentMethodId");

                    b.HasIndex("SexId");

                    b.HasIndex("StorageTemperatureId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "Barcode", "CollectionName")
                        .IsUnique();

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.LiveTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TreatmentCodeId")
                        .IsRequired()
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TreatmentCodeOntologyVersionId")
                        .HasColumnType("integer");

                    b.Property<int?>("TreatmentLocationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentCodeId");

                    b.HasIndex("TreatmentCodeOntologyVersionId");

                    b.HasIndex("TreatmentLocationId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateTreated", "TreatmentCodeId")
                        .IsUnique();

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.ReferenceData.Ontology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ontologies");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.ReferenceData.OntologyVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OntologyId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OntologyId");

                    b.ToTable("OntologyVersions");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.ReferenceData.SampleContentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SampleContentMethods");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.ReferenceData.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.ReferenceData.TreatmentLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TreatmentLocations");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.StagedDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateDiagnosed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DiagnosisCodeId")
                        .IsRequired()
                        .HasColumnType("character varying(20)");

                    b.Property<int>("DiagnosisCodeOntologyVersionId")
                        .HasColumnType("integer");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisCodeId");

                    b.HasIndex("DiagnosisCodeOntologyVersionId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateDiagnosed", "DiagnosisCodeId")
                        .IsUnique();

                    b.ToTable("StagedDiagnoses");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.StagedDiagnosisDelete", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("StagedDiagnosisDeletes");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.StagedSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeAtDonation")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CollectionName")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("ExtractionProcedureId")
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ExtractionSiteId")
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("ExtractionSiteOntologyVersionId")
                        .HasColumnType("integer");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreservationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("SampleContentId")
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("SampleContentMethodId")
                        .HasColumnType("integer");

                    b.Property<int?>("SexId")
                        .HasColumnType("integer");

                    b.Property<int?>("StorageTemperatureId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("YearOfBirth")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExtractionProcedureId");

                    b.HasIndex("ExtractionSiteId");

                    b.HasIndex("ExtractionSiteOntologyVersionId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("PreservationTypeId");

                    b.HasIndex("SampleContentId");

                    b.HasIndex("SampleContentMethodId");

                    b.HasIndex("SexId");

                    b.HasIndex("StorageTemperatureId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "Barcode", "CollectionName")
                        .IsUnique();

                    b.ToTable("StagedSamples");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.StagedSampleDelete", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("StagedSampleDeletes");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.StagedTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IndividualReferenceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SubmissionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TreatmentCodeId")
                        .IsRequired()
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TreatmentCodeOntologyVersionId")
                        .HasColumnType("integer");

                    b.Property<int?>("TreatmentLocationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentCodeId");

                    b.HasIndex("TreatmentCodeOntologyVersionId");

                    b.HasIndex("TreatmentLocationId");

                    b.HasIndex("OrganisationId", "IndividualReferenceId", "DateTreated", "TreatmentCodeId")
                        .IsUnique();

                    b.ToTable("StagedTreatments");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.StagedTreatmentDelete", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("StagedTreatmentDeletes");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BiobankId")
                        .HasColumnType("integer");

                    b.Property<int>("RecordsProcessed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StatusChangeTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubmissionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalRecords")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Analytics.DirectoryAnalyticEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biobank")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int>("Counts")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventAction")
                        .HasColumnType("text");

                    b.Property<string>("EventCategory")
                        .HasColumnType("text");

                    b.Property<string>("Hostname")
                        .HasColumnType("text");

                    b.Property<string>("Segment")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DirectoryAnalyticEvents");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Analytics.DirectoryAnalyticMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvgSessionDuration")
                        .HasColumnType("integer");

                    b.Property<int>("BounceRate")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Hostname")
                        .HasColumnType("text");

                    b.Property<string>("PagePath")
                        .HasColumnType("text");

                    b.Property<string>("PagePathLevel1")
                        .HasColumnType("text");

                    b.Property<int>("PercentNewSessions")
                        .HasColumnType("integer");

                    b.Property<string>("Segment")
                        .HasColumnType("text");

                    b.Property<int>("Sessions")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DirectoryAnalyticMetrics");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Analytics.OrganisationAnalytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int>("Counts")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Hostname")
                        .HasColumnType("text");

                    b.Property<string>("OrganisationExternalId")
                        .HasColumnType("text");

                    b.Property<string>("PagePath")
                        .HasColumnType("text");

                    b.Property<string>("PreviousPagePath")
                        .HasColumnType("text");

                    b.Property<string>("Segment")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrganisationAnalytics");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Blob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("ContentDisposition")
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Blobs");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.CapabilityAssociatedData", b =>
                {
                    b.Property<int>("DiagnosisCapabilityId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("AssociatedDataTypeId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int?>("AssociatedDataProcurementTimeframeId")
                        .HasColumnType("integer");

                    b.HasKey("DiagnosisCapabilityId", "AssociatedDataTypeId");

                    b.HasIndex("AssociatedDataProcurementTimeframeId");

                    b.HasIndex("AssociatedDataTypeId");

                    b.ToTable("CapabilityAssociatedDatas");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Collection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CollectionId"));

                    b.Property<int>("AccessConditionId")
                        .HasColumnType("integer");

                    b.Property<int>("CollectionStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("CollectionTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("FromApi")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OntologyTermId")
                        .HasColumnType("character varying(20)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("CollectionId");

                    b.HasIndex("AccessConditionId");

                    b.HasIndex("CollectionStatusId");

                    b.HasIndex("CollectionTypeId");

                    b.HasIndex("OntologyTermId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.CollectionAssociatedData", b =>
                {
                    b.Property<int>("CollectionId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("AssociatedDataTypeId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int?>("AssociatedDataProcurementTimeframeId")
                        .HasColumnType("integer");

                    b.HasKey("CollectionId", "AssociatedDataTypeId");

                    b.HasIndex("AssociatedDataProcurementTimeframeId");

                    b.HasIndex("AssociatedDataTypeId");

                    b.ToTable("CollectionAssociatedDatas");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Config", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsFeatureFlag")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ContentPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RouteSlug")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("ContentPages");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.DiagnosisCapability", b =>
                {
                    b.Property<int>("DiagnosisCapabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiagnosisCapabilityId"));

                    b.Property<int>("AnnualDonorExpectation")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OntologyTermId")
                        .HasColumnType("character varying(20)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<int>("SampleCollectionModeId")
                        .HasColumnType("integer");

                    b.HasKey("DiagnosisCapabilityId");

                    b.HasIndex("OntologyTermId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("SampleCollectionModeId");

                    b.ToTable("DiagnosisCapabilities");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.MaterialDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CollectionPercentageId")
                        .HasColumnType("integer");

                    b.Property<string>("ExtractionProcedureId")
                        .HasColumnType("character varying(20)");

                    b.Property<int>("MacroscopicAssessmentId")
                        .HasColumnType("integer");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreservationTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("SampleSetId")
                        .HasColumnType("integer");

                    b.Property<int>("StorageTemperatureId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CollectionPercentageId");

                    b.HasIndex("ExtractionProcedureId");

                    b.HasIndex("MacroscopicAssessmentId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("PreservationTypeId");

                    b.HasIndex("StorageTemperatureId");

                    b.HasIndex("SampleSetId", "MaterialTypeId", "StorageTemperatureId", "MacroscopicAssessmentId", "ExtractionProcedureId", "PreservationTypeId")
                        .IsUnique();

                    b.ToTable("MaterialDetails");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Network", b =>
                {
                    b.Property<int>("NetworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NetworkId"));

                    b.Property<bool>("ContactHandoverEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HandoverBaseUrl")
                        .HasColumnType("text");

                    b.Property<bool>("HandoverNonMembers")
                        .HasColumnType("boolean");

                    b.Property<string>("HandoverNonMembersUrlParamName")
                        .HasColumnType("text");

                    b.Property<string>("HandoverOrgIdsUrlParamName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<bool>("MultipleHandoverOrdIdsParams")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SopStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("NetworkId");

                    b.HasIndex("SopStatusId");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.NetworkRegisterRequest", b =>
                {
                    b.Property<int>("NetworkRegisterRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NetworkRegisterRequestId"));

                    b.Property<DateTime?>("AcceptedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeclinedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("NetworkCreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NetworkName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NetworkRegisterRequestId");

                    b.ToTable("NetworkRegisterRequests");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.NetworkUser", b =>
                {
                    b.Property<int>("NetworkId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<string>("NetworkUserId")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.HasKey("NetworkId", "NetworkUserId");

                    b.ToTable("NetworkUsers");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Organisation", b =>
                {
                    b.Property<int>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrganisationId"));

                    b.Property<int?>("AccessConditionId")
                        .HasColumnType("integer");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine4")
                        .HasColumnType("text");

                    b.Property<Guid?>("AnonymousIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int?>("CollectionTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int?>("CountyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EthicsRegistration")
                        .HasColumnType("text");

                    b.Property<bool>("ExcludePublications")
                        .HasColumnType("boolean");

                    b.Property<string>("GoverningDepartment")
                        .HasColumnType("text");

                    b.Property<string>("GoverningInstitution")
                        .HasColumnType("text");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganisationExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganisationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("OtherRegistrationReason")
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.Property<bool>("SharingOptOut")
                        .HasColumnType("boolean");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("OrganisationId");

                    b.HasIndex("AccessConditionId");

                    b.HasIndex("CollectionTypeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountyId");

                    b.HasIndex("OrganisationTypeId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.OrganisationAnnualStatistic", b =>
                {
                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("AnnualStatisticId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnOrder(2);

                    b.Property<int?>("Value")
                        .HasColumnType("integer");

                    b.HasKey("OrganisationId", "AnnualStatisticId", "Year");

                    b.HasIndex("AnnualStatisticId");

                    b.ToTable("OrganisationAnnualStatistics");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.OrganisationNetwork", b =>
                {
                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("NetworkId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalID")
                        .HasColumnType("text");

                    b.HasKey("OrganisationId", "NetworkId");

                    b.HasIndex("NetworkId");

                    b.ToTable("OrganisationNetworks");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.OrganisationRegisterRequest", b =>
                {
                    b.Property<int>("OrganisationRegisterRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrganisationRegisterRequestId"));

                    b.Property<DateTime?>("AcceptedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeclinedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("OrganisationCreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrganisationExternalId")
                        .HasColumnType("text");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganisationTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrganisationRegisterRequestId");

                    b.HasIndex("OrganisationTypeId");

                    b.ToTable("OrganisationRegisterRequests");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.OrganisationRegistrationReason", b =>
                {
                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("RegistrationReasonId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.HasKey("OrganisationId", "RegistrationReasonId");

                    b.HasIndex("RegistrationReasonId");

                    b.ToTable("OrganisationRegistrationReasons");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.OrganisationServiceOffering", b =>
                {
                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("ServiceOfferingId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.HasKey("OrganisationId", "ServiceOfferingId");

                    b.HasIndex("ServiceOfferingId");

                    b.ToTable("OrganisationServiceOfferings");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.OrganisationType", b =>
                {
                    b.Property<int>("OrganisationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrganisationTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("OrganisationTypeId");

                    b.ToTable("OrganisationTypes");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.OrganisationUser", b =>
                {
                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<string>("OrganisationUserId")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.HasKey("OrganisationId", "OrganisationUserId");

                    b.ToTable("OrganisationUsers");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AnnotationsSynced")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Authors")
                        .HasColumnType("text");

                    b.Property<string>("DOI")
                        .HasColumnType("text");

                    b.Property<string>("Journal")
                        .HasColumnType("text");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer");

                    b.Property<string>("PublicationId")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.AccessCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AccessConditions");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.AgeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LowerBound")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("UpperBound")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LowerBound", "UpperBound")
                        .IsUnique();

                    b.ToTable("AgeRanges");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.Annotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Annotations");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.AnnualStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnnualStatisticGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnnualStatisticGroupId");

                    b.ToTable("AnnualStatistics");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.AnnualStatisticGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AnnualStatisticGroups");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.AssociatedDataProcurementTimeframe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AssociatedDataProcurementTimeframes");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.AssociatedDataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssociatedDataTypeGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedDataTypeGroupId");

                    b.ToTable("AssociatedDataTypes");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.AssociatedDataTypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AssociatedDataTypeGroups");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.CollectionPercentage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("LowerBound")
                        .HasColumnType("numeric");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<decimal>("UpperBound")
                        .HasColumnType("numeric");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CollectionPercentages");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.CollectionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CollectionStatus");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.CollectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CollectionTypes");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.ConsentRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ConsentRestrictions");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.DonorCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("LowerBound")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int?>("UpperBound")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DonorCounts");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.Funder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Funders");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.MacroscopicAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MacroscopicAssessments");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.RegistrationReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RegistrationReasons");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.SampleCollectionMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SampleCollectionModes");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.ServiceOffering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceOfferings");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.SopStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SopStatus");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.RegistrationDomainRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RegistrationDomainRules");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.SampleSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeRangeId")
                        .HasColumnType("integer");

                    b.Property<int>("CollectionId")
                        .HasColumnType("integer");

                    b.Property<int>("DonorCountId")
                        .HasColumnType("integer");

                    b.Property<int>("SexId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgeRangeId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("DonorCountId");

                    b.HasIndex("SexId");

                    b.ToTable("SampleSets");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.TokenIssueRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TokenIssueRecords");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.TokenValidationRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ValidationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ValidationSuccessful")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("TokenValidationRecords");
                });

            modelBuilder.Entity("Biobanks.Entities.Shared.ApiClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientSecretHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApiClients");
                });

            modelBuilder.Entity("Biobanks.Entities.Shared.ReferenceData.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MaterialTypes");
                });

            modelBuilder.Entity("Biobanks.Entities.Shared.ReferenceData.MaterialTypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MaterialTypeGroups");
                });

            modelBuilder.Entity("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("DisplayOnDirectory")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherTerms")
                        .HasColumnType("text");

                    b.Property<int?>("SnomedTagId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SnomedTagId");

                    b.ToTable("OntologyTerms");
                });

            modelBuilder.Entity("Biobanks.Entities.Shared.ReferenceData.PreservationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int?>("StorageTemperatureId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StorageTemperatureId");

                    b.ToTable("PreservationTypes");
                });

            modelBuilder.Entity("Biobanks.Entities.Shared.ReferenceData.Sex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sexes");
                });

            modelBuilder.Entity("Biobanks.Entities.Shared.ReferenceData.SnomedTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SnomedTags");
                });

            modelBuilder.Entity("Biobanks.Entities.Shared.ReferenceData.StorageTemperature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StorageTemperatures");
                });

            modelBuilder.Entity("CollectionConsentRestriction", b =>
                {
                    b.Property<int>("CollectionsCollectionId")
                        .HasColumnType("integer");

                    b.Property<int>("ConsentRestrictionsId")
                        .HasColumnType("integer");

                    b.HasKey("CollectionsCollectionId", "ConsentRestrictionsId");

                    b.HasIndex("ConsentRestrictionsId");

                    b.ToTable("CollectionConsentRestriction");
                });

            modelBuilder.Entity("FunderOrganisation", b =>
                {
                    b.Property<int>("FundersId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationsOrganisationId")
                        .HasColumnType("integer");

                    b.HasKey("FundersId", "OrganisationsOrganisationId");

                    b.HasIndex("OrganisationsOrganisationId");

                    b.ToTable("FunderOrganisation");
                });

            modelBuilder.Entity("MaterialTypeMaterialTypeGroup", b =>
                {
                    b.Property<int>("MaterialTypeGroupsId")
                        .HasColumnType("integer");

                    b.Property<int>("MaterialTypesId")
                        .HasColumnType("integer");

                    b.HasKey("MaterialTypeGroupsId", "MaterialTypesId");

                    b.HasIndex("MaterialTypesId");

                    b.ToTable("MaterialTypeMaterialTypeGroup");
                });

            modelBuilder.Entity("MaterialTypeOntologyTerm", b =>
                {
                    b.Property<string>("ExtractionProceduresId")
                        .HasColumnType("character varying(20)");

                    b.Property<int>("MaterialTypesId")
                        .HasColumnType("integer");

                    b.HasKey("ExtractionProceduresId", "MaterialTypesId");

                    b.HasIndex("MaterialTypesId");

                    b.ToTable("MaterialTypeOntologyTerm");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AnnotationPublication", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.ReferenceData.Annotation", null)
                        .WithMany()
                        .HasForeignKey("AnnotationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Data.Publication", null)
                        .WithMany()
                        .HasForeignKey("PublicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiClientOrganisation", b =>
                {
                    b.HasOne("Biobanks.Entities.Shared.ApiClient", null)
                        .WithMany()
                        .HasForeignKey("ApiClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Data.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationsOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssociatedDataTypeOntologyTerm", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.ReferenceData.AssociatedDataType", null)
                        .WithMany()
                        .HasForeignKey("AssociatedDataTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", null)
                        .WithMany()
                        .HasForeignKey("OntologyTermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biobanks.Entities.Api.Error", b =>
                {
                    b.HasOne("Biobanks.Entities.Api.Submission", "Submission")
                        .WithMany("Errors")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.LiveDiagnosis", b =>
                {
                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", "DiagnosisCode")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Api.ReferenceData.OntologyVersion", "DiagnosisCodeOntologyVersion")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodeOntologyVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosisCode");

                    b.Navigation("DiagnosisCodeOntologyVersion");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.LiveSample", b =>
                {
                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", "ExtractionProcedure")
                        .WithMany()
                        .HasForeignKey("ExtractionProcedureId");

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", "ExtractionSite")
                        .WithMany()
                        .HasForeignKey("ExtractionSiteId");

                    b.HasOne("Biobanks.Entities.Api.ReferenceData.OntologyVersion", "ExtractionSiteOntologyVersion")
                        .WithMany()
                        .HasForeignKey("ExtractionSiteOntologyVersionId");

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.PreservationType", "PreservationType")
                        .WithMany()
                        .HasForeignKey("PreservationTypeId");

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", "SampleContent")
                        .WithMany()
                        .HasForeignKey("SampleContentId");

                    b.HasOne("Biobanks.Entities.Api.ReferenceData.SampleContentMethod", "SampleContentMethod")
                        .WithMany()
                        .HasForeignKey("SampleContentMethodId");

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.Sex", "Sex")
                        .WithMany()
                        .HasForeignKey("SexId");

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.StorageTemperature", "StorageTemperature")
                        .WithMany()
                        .HasForeignKey("StorageTemperatureId");

                    b.Navigation("ExtractionProcedure");

                    b.Navigation("ExtractionSite");

                    b.Navigation("ExtractionSiteOntologyVersion");

                    b.Navigation("MaterialType");

                    b.Navigation("PreservationType");

                    b.Navigation("SampleContent");

                    b.Navigation("SampleContentMethod");

                    b.Navigation("Sex");

                    b.Navigation("StorageTemperature");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.LiveTreatment", b =>
                {
                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", "TreatmentCode")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Api.ReferenceData.OntologyVersion", "TreatmentCodeOntologyVersion")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeOntologyVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Api.ReferenceData.TreatmentLocation", "TreatmentLocation")
                        .WithMany()
                        .HasForeignKey("TreatmentLocationId");

                    b.Navigation("TreatmentCode");

                    b.Navigation("TreatmentCodeOntologyVersion");

                    b.Navigation("TreatmentLocation");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.ReferenceData.OntologyVersion", b =>
                {
                    b.HasOne("Biobanks.Entities.Api.ReferenceData.Ontology", "Ontology")
                        .WithMany("OntologyVersions")
                        .HasForeignKey("OntologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ontology");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.StagedDiagnosis", b =>
                {
                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", "DiagnosisCode")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Api.ReferenceData.OntologyVersion", "DiagnosisCodeOntologyVersion")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodeOntologyVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosisCode");

                    b.Navigation("DiagnosisCodeOntologyVersion");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.StagedSample", b =>
                {
                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", "ExtractionProcedure")
                        .WithMany()
                        .HasForeignKey("ExtractionProcedureId");

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", "ExtractionSite")
                        .WithMany()
                        .HasForeignKey("ExtractionSiteId");

                    b.HasOne("Biobanks.Entities.Api.ReferenceData.OntologyVersion", "ExtractionSiteOntologyVersion")
                        .WithMany()
                        .HasForeignKey("ExtractionSiteOntologyVersionId");

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.PreservationType", "PreservationType")
                        .WithMany()
                        .HasForeignKey("PreservationTypeId");

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", "SampleContent")
                        .WithMany()
                        .HasForeignKey("SampleContentId");

                    b.HasOne("Biobanks.Entities.Api.ReferenceData.SampleContentMethod", "SampleContentMethod")
                        .WithMany()
                        .HasForeignKey("SampleContentMethodId");

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.Sex", "Sex")
                        .WithMany()
                        .HasForeignKey("SexId");

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.StorageTemperature", "StorageTemperature")
                        .WithMany()
                        .HasForeignKey("StorageTemperatureId");

                    b.Navigation("ExtractionProcedure");

                    b.Navigation("ExtractionSite");

                    b.Navigation("ExtractionSiteOntologyVersion");

                    b.Navigation("MaterialType");

                    b.Navigation("PreservationType");

                    b.Navigation("SampleContent");

                    b.Navigation("SampleContentMethod");

                    b.Navigation("Sex");

                    b.Navigation("StorageTemperature");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.StagedTreatment", b =>
                {
                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", "TreatmentCode")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Api.ReferenceData.OntologyVersion", "TreatmentCodeOntologyVersion")
                        .WithMany()
                        .HasForeignKey("TreatmentCodeOntologyVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Api.ReferenceData.TreatmentLocation", "TreatmentLocation")
                        .WithMany()
                        .HasForeignKey("TreatmentLocationId");

                    b.Navigation("TreatmentCode");

                    b.Navigation("TreatmentCodeOntologyVersion");

                    b.Navigation("TreatmentLocation");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.Submission", b =>
                {
                    b.HasOne("Biobanks.Entities.Api.ReferenceData.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.CapabilityAssociatedData", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.ReferenceData.AssociatedDataProcurementTimeframe", "AssociatedDataProcurementTimeframe")
                        .WithMany()
                        .HasForeignKey("AssociatedDataProcurementTimeframeId");

                    b.HasOne("Biobanks.Entities.Data.ReferenceData.AssociatedDataType", "AssociatedDataType")
                        .WithMany()
                        .HasForeignKey("AssociatedDataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Data.DiagnosisCapability", "DiagnosisCapability")
                        .WithMany("AssociatedData")
                        .HasForeignKey("DiagnosisCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociatedDataProcurementTimeframe");

                    b.Navigation("AssociatedDataType");

                    b.Navigation("DiagnosisCapability");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Collection", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.ReferenceData.AccessCondition", "AccessCondition")
                        .WithMany()
                        .HasForeignKey("AccessConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Data.ReferenceData.CollectionStatus", "CollectionStatus")
                        .WithMany()
                        .HasForeignKey("CollectionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Data.ReferenceData.CollectionType", "CollectionType")
                        .WithMany()
                        .HasForeignKey("CollectionTypeId");

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", "OntologyTerm")
                        .WithMany()
                        .HasForeignKey("OntologyTermId");

                    b.HasOne("Biobanks.Entities.Data.Organisation", "Organisation")
                        .WithMany("Collections")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessCondition");

                    b.Navigation("CollectionStatus");

                    b.Navigation("CollectionType");

                    b.Navigation("OntologyTerm");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.CollectionAssociatedData", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.ReferenceData.AssociatedDataProcurementTimeframe", "AssociatedDataProcurementTimeframe")
                        .WithMany()
                        .HasForeignKey("AssociatedDataProcurementTimeframeId");

                    b.HasOne("Biobanks.Entities.Data.ReferenceData.AssociatedDataType", "AssociatedDataType")
                        .WithMany()
                        .HasForeignKey("AssociatedDataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Data.Collection", "Collection")
                        .WithMany("AssociatedData")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociatedDataProcurementTimeframe");

                    b.Navigation("AssociatedDataType");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.DiagnosisCapability", b =>
                {
                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", "OntologyTerm")
                        .WithMany()
                        .HasForeignKey("OntologyTermId");

                    b.HasOne("Biobanks.Entities.Data.Organisation", "Organisation")
                        .WithMany("DiagnosisCapabilities")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Data.ReferenceData.SampleCollectionMode", "SampleCollectionMode")
                        .WithMany()
                        .HasForeignKey("SampleCollectionModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OntologyTerm");

                    b.Navigation("Organisation");

                    b.Navigation("SampleCollectionMode");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.MaterialDetail", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.ReferenceData.CollectionPercentage", "CollectionPercentage")
                        .WithMany()
                        .HasForeignKey("CollectionPercentageId");

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", "ExtractionProcedure")
                        .WithMany()
                        .HasForeignKey("ExtractionProcedureId");

                    b.HasOne("Biobanks.Entities.Data.ReferenceData.MacroscopicAssessment", "MacroscopicAssessment")
                        .WithMany()
                        .HasForeignKey("MacroscopicAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.PreservationType", "PreservationType")
                        .WithMany()
                        .HasForeignKey("PreservationTypeId");

                    b.HasOne("Biobanks.Entities.Data.SampleSet", "SampleSet")
                        .WithMany("MaterialDetails")
                        .HasForeignKey("SampleSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.StorageTemperature", "StorageTemperature")
                        .WithMany()
                        .HasForeignKey("StorageTemperatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CollectionPercentage");

                    b.Navigation("ExtractionProcedure");

                    b.Navigation("MacroscopicAssessment");

                    b.Navigation("MaterialType");

                    b.Navigation("PreservationType");

                    b.Navigation("SampleSet");

                    b.Navigation("StorageTemperature");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Network", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.ReferenceData.SopStatus", "SopStatus")
                        .WithMany()
                        .HasForeignKey("SopStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SopStatus");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.NetworkUser", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.Network", "Network")
                        .WithMany()
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Organisation", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.ReferenceData.AccessCondition", "AccessCondition")
                        .WithMany("Organisations")
                        .HasForeignKey("AccessConditionId");

                    b.HasOne("Biobanks.Entities.Data.ReferenceData.CollectionType", "CollectionType")
                        .WithMany("Organisations")
                        .HasForeignKey("CollectionTypeId");

                    b.HasOne("Biobanks.Entities.Data.ReferenceData.Country", "Country")
                        .WithMany("Organisations")
                        .HasForeignKey("CountryId");

                    b.HasOne("Biobanks.Entities.Data.ReferenceData.County", "County")
                        .WithMany("Organisations")
                        .HasForeignKey("CountyId");

                    b.HasOne("Biobanks.Entities.Data.OrganisationType", "OrganisationType")
                        .WithMany()
                        .HasForeignKey("OrganisationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessCondition");

                    b.Navigation("CollectionType");

                    b.Navigation("Country");

                    b.Navigation("County");

                    b.Navigation("OrganisationType");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.OrganisationAnnualStatistic", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.ReferenceData.AnnualStatistic", "AnnualStatistic")
                        .WithMany("OrganisationAnnualStatistics")
                        .HasForeignKey("AnnualStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Data.Organisation", "Organisation")
                        .WithMany("OrganisationAnnualStatistics")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnualStatistic");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.OrganisationNetwork", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.Network", "Network")
                        .WithMany("OrganisationNetworks")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Data.Organisation", "Organisation")
                        .WithMany("OrganisationNetworks")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.OrganisationRegisterRequest", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.OrganisationType", "OrganisationType")
                        .WithMany()
                        .HasForeignKey("OrganisationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganisationType");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.OrganisationRegistrationReason", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.Organisation", "Organisation")
                        .WithMany("OrganisationRegistrationReasons")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Data.ReferenceData.RegistrationReason", "RegistrationReason")
                        .WithMany()
                        .HasForeignKey("RegistrationReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("RegistrationReason");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.OrganisationServiceOffering", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.Organisation", "Organisation")
                        .WithMany("OrganisationServiceOfferings")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Data.ReferenceData.ServiceOffering", "ServiceOffering")
                        .WithMany("OrganisationServiceOfferings")
                        .HasForeignKey("ServiceOfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("ServiceOffering");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.OrganisationUser", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.Organisation", "Organisation")
                        .WithMany("OrganisationUsers")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Publication", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.AnnualStatistic", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.ReferenceData.AnnualStatisticGroup", "AnnualStatisticGroup")
                        .WithMany("AnnualStatistics")
                        .HasForeignKey("AnnualStatisticGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnualStatisticGroup");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.AssociatedDataType", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.ReferenceData.AssociatedDataTypeGroup", "AssociatedDataTypeGroup")
                        .WithMany("AssociatedDataTypes")
                        .HasForeignKey("AssociatedDataTypeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociatedDataTypeGroup");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.County", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.ReferenceData.Country", "Country")
                        .WithMany("Counties")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.SampleSet", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.ReferenceData.AgeRange", "AgeRange")
                        .WithMany()
                        .HasForeignKey("AgeRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Data.Collection", "Collection")
                        .WithMany("SampleSets")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Data.ReferenceData.DonorCount", "DonorCount")
                        .WithMany()
                        .HasForeignKey("DonorCountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.Sex", "Sex")
                        .WithMany()
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeRange");

                    b.Navigation("Collection");

                    b.Navigation("DonorCount");

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", b =>
                {
                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.SnomedTag", "SnomedTag")
                        .WithMany("OntologyTerms")
                        .HasForeignKey("SnomedTagId");

                    b.Navigation("SnomedTag");
                });

            modelBuilder.Entity("Biobanks.Entities.Shared.ReferenceData.PreservationType", b =>
                {
                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.StorageTemperature", "StorageTemperature")
                        .WithMany()
                        .HasForeignKey("StorageTemperatureId");

                    b.Navigation("StorageTemperature");
                });

            modelBuilder.Entity("CollectionConsentRestriction", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.Collection", null)
                        .WithMany()
                        .HasForeignKey("CollectionsCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Data.ReferenceData.ConsentRestriction", null)
                        .WithMany()
                        .HasForeignKey("ConsentRestrictionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FunderOrganisation", b =>
                {
                    b.HasOne("Biobanks.Entities.Data.ReferenceData.Funder", null)
                        .WithMany()
                        .HasForeignKey("FundersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Data.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationsOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialTypeMaterialTypeGroup", b =>
                {
                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.MaterialTypeGroup", null)
                        .WithMany()
                        .HasForeignKey("MaterialTypeGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.MaterialType", null)
                        .WithMany()
                        .HasForeignKey("MaterialTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialTypeOntologyTerm", b =>
                {
                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.OntologyTerm", null)
                        .WithMany()
                        .HasForeignKey("ExtractionProceduresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Entities.Shared.ReferenceData.MaterialType", null)
                        .WithMany()
                        .HasForeignKey("MaterialTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Biobanks.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Biobanks.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biobanks.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Biobanks.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biobanks.Entities.Api.ReferenceData.Ontology", b =>
                {
                    b.Navigation("OntologyVersions");
                });

            modelBuilder.Entity("Biobanks.Entities.Api.Submission", b =>
                {
                    b.Navigation("Errors");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Collection", b =>
                {
                    b.Navigation("AssociatedData");

                    b.Navigation("SampleSets");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.DiagnosisCapability", b =>
                {
                    b.Navigation("AssociatedData");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Network", b =>
                {
                    b.Navigation("OrganisationNetworks");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.Organisation", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("DiagnosisCapabilities");

                    b.Navigation("OrganisationAnnualStatistics");

                    b.Navigation("OrganisationNetworks");

                    b.Navigation("OrganisationRegistrationReasons");

                    b.Navigation("OrganisationServiceOfferings");

                    b.Navigation("OrganisationUsers");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.AccessCondition", b =>
                {
                    b.Navigation("Organisations");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.AnnualStatistic", b =>
                {
                    b.Navigation("OrganisationAnnualStatistics");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.AnnualStatisticGroup", b =>
                {
                    b.Navigation("AnnualStatistics");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.AssociatedDataTypeGroup", b =>
                {
                    b.Navigation("AssociatedDataTypes");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.CollectionType", b =>
                {
                    b.Navigation("Organisations");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.Country", b =>
                {
                    b.Navigation("Counties");

                    b.Navigation("Organisations");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.County", b =>
                {
                    b.Navigation("Organisations");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.ReferenceData.ServiceOffering", b =>
                {
                    b.Navigation("OrganisationServiceOfferings");
                });

            modelBuilder.Entity("Biobanks.Entities.Data.SampleSet", b =>
                {
                    b.Navigation("MaterialDetails");
                });

            modelBuilder.Entity("Biobanks.Entities.Shared.ReferenceData.SnomedTag", b =>
                {
                    b.Navigation("OntologyTerms");
                });
#pragma warning restore 612, 618
        }
    }
}
