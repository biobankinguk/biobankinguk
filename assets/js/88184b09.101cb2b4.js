"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[326],{8570:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>g});var a=n(79);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),m=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},d=function(t){var e=m(t.components);return a.createElement(s.Provider,{value:e},t.children)},p="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),p=m(n),c=r,g=p["".concat(s,".").concat(c)]||p[c]||u[c]||i;return n?a.createElement(g,l(l({ref:e},d),{},{components:n})):a.createElement(g,l({ref:e},d))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o[p]="string"==typeof t?t:r,l[1]=o;for(var m=2;m<i;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},684:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var a=n(5675),r=(n(79),n(8570));const i={},l="Postman Testing Suite",o={unversionedId:"dev/submissions/api-testing",id:"dev/submissions/api-testing",title:"Postman Testing Suite",description:"This folder contains all the automated Postman tests used to verify the Submissions API is working as intended. The tests are split up into different collections depending on their domain. This is to make testing specific components of the API Sutie easier, and makes updating and adding new tests simpler.",source:"@site/docs/dev/submissions/api-testing.md",sourceDirName:"dev/submissions",slug:"/dev/submissions/api-testing",permalink:"/dev/submissions/api-testing",draft:!1,editUrl:"https://github.com/biobankinguk/biobankinguk/edit/main/docs/docs/dev/submissions/api-testing.md",tags:[],version:"current",frontMatter:{},sidebar:"devGuide",previous:{title:"API Services",permalink:"/dev/submissions/api-services"},next:{title:"Worker Jobs",permalink:"/dev/submissions/worker-jobs"}},s={},m=[{value:"Running With Newman CLI (Recommended)",id:"running-with-newman-cli-recommended",level:2},{value:"<strong>Prerequisites</strong>",id:"prerequisites",level:3},{value:"<strong>Getting Started</strong>",id:"getting-started",level:3},{value:"<strong>Running A Collection</strong>",id:"running-a-collection",level:3},{value:"Running In Postman",id:"running-in-postman",level:2}],d={toc:m},p="wrapper";function u(t){let{components:e,...n}=t;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"postman-testing-suite"},"Postman Testing Suite"),(0,r.kt)("p",null,"This folder contains all the automated Postman tests used to verify the Submissions API is working as intended. The tests are split up into different collections depending on their domain. This is to make testing specific components of the API Sutie easier, and makes updating and adding new tests simpler."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"##"),(0,r.kt)("th",{parentName:"tr",align:null},"Collection"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"01"),(0,r.kt)("td",{parentName:"tr",align:null},"User Authentication"),(0,r.kt)("td",{parentName:"tr",align:null},"Authenticates the user, acquiring a ",(0,r.kt)("inlineCode",{parentName:"td"},"user-token"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"02"),(0,r.kt)("td",{parentName:"tr",align:null},"Smoke Test"),(0,r.kt)("td",{parentName:"tr",align:null},"Checks if all required service are live")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"03"),(0,r.kt)("td",{parentName:"tr",align:null},"Identity Service"),(0,r.kt)("td",{parentName:"tr",align:null},"Test authentication endpoint and some authenticated endpoints")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"04"),(0,r.kt)("td",{parentName:"tr",align:null},"Data Sample Validation"),(0,r.kt)("td",{parentName:"tr",align:null},"Check validation of all Sample fields")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"05"),(0,r.kt)("td",{parentName:"tr",align:null},"Data Diagnosis Validation"),(0,r.kt)("td",{parentName:"tr",align:null},"Check validation of all Diagnosis fields")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"06"),(0,r.kt)("td",{parentName:"tr",align:null},"Data Treatment Validation"),(0,r.kt)("td",{parentName:"tr",align:null},"Check validation of all Treatment fields")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"07"),(0,r.kt)("td",{parentName:"tr",align:null},"Data Sample Errors"),(0,r.kt)("td",{parentName:"tr",align:null},"Check correct error reporting on invalid Samples")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"08"),(0,r.kt)("td",{parentName:"tr",align:null},"Data Diagnosis Errors"),(0,r.kt)("td",{parentName:"tr",align:null},"Check correct error reporting on invalid Diagnoses")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"09"),(0,r.kt)("td",{parentName:"tr",align:null},"Data Treatment Errors"),(0,r.kt)("td",{parentName:"tr",align:null},"Check correct error reporting on invalid Treatment")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"Status Service"),(0,r.kt)("td",{parentName:"tr",align:null},"Check responses on status endpoint for uploaded submissions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"11"),(0,r.kt)("td",{parentName:"tr",align:null},"Reject"),(0,r.kt)("td",{parentName:"tr",align:null},"Test rejection of submissions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"12"),(0,r.kt)("td",{parentName:"tr",align:null},"Commit"),(0,r.kt)("td",{parentName:"tr",align:null},"Test commital of submissions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"13"),(0,r.kt)("td",{parentName:"tr",align:null},"Submission Limits"),(0,r.kt)("td",{parentName:"tr",align:null},"Submission limits and stress tests (10k, 500k Submissions)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"14"),(0,r.kt)("td",{parentName:"tr",align:null},"Post Test Cleaning"),(0,r.kt)("td",{parentName:"tr",align:null},"Clears all submitted, unproccessed data")))),(0,r.kt)("h2",{id:"running-with-newman-cli-recommended"},"Running With Newman CLI (Recommended)"),(0,r.kt)("p",null,"Newman is the CLI tool created by the Postman team, to be able to run Postman collections via the command line. It is the recommended way to quickly and robustly run tests against any Submissions API environment."),(0,r.kt)("p",null,"More information about Newman can be found on the ",(0,r.kt)("a",{parentName:"p",href:"https://learning.postman.com/docs/running-collections/using-newman-cli/command-line-integration-with-newman/"},"Postman website"),". "),(0,r.kt)("h3",{id:"prerequisites"},(0,r.kt)("strong",{parentName:"h3"},"Prerequisites")),(0,r.kt)("p",null,"Newman is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Node.js")," tool and therefore requires ",(0,r.kt)("inlineCode",{parentName:"p"},"npm")," to be installed. "),(0,r.kt)("p",null,"To install and setup the Newman CLI globally, run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm install -g newman\n")),(0,r.kt)("p",null,"To test Newman has been installed correctly"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ newman run -h\n")),(0,r.kt)("p",null,"This will display all available options and flags of the Newman CLI. For more details on the CLI options, check out the ",(0,r.kt)("a",{parentName:"p",href:"https://learning.postman.com/docs/running-collections/using-newman-cli/command-line-integration-with-newman/#options"},"Newman documentation"),"."),(0,r.kt)("h3",{id:"getting-started"},(0,r.kt)("strong",{parentName:"h3"},"Getting Started")),(0,r.kt)("p",null,"To begin, the Postman environment must be properly configured to the user's API credentials by editing ",(0,r.kt)("inlineCode",{parentName:"p"},"environment.postman_environment.json"),". This contains all environmental variables used by the Postman collections during testing."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"api-url"),(0,r.kt)("td",{parentName:"tr",align:null},"https://localhost:5001"),(0,r.kt)("td",{parentName:"tr",align:null},"URL of the base API endpoint")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"directory-url"),(0,r.kt)("td",{parentName:"tr",align:null},"https://localhost:44300"),(0,r.kt)("td",{parentName:"tr",align:null},"URL of the Directory")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"user-client-id"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Generated API User ID")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"user-client-secret"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Generated API User Secret")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"user-biobank-id"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Organisation Internal ID")))),(0,r.kt)("p",null,"By default, the environment is configured to run against a local test environment. The user credentials will have to be supplied; these can be generated under the ",(0,r.kt)("inlineCode",{parentName:"p"},"Bulk Submissions")," section on an Organisations Admin page."),(0,r.kt)("p",null,"Once configured, the user needs to be authenticated by the API such that a ",(0,r.kt)("inlineCode",{parentName:"p"},"user-token")," can be generated. The ",(0,r.kt)("inlineCode",{parentName:"p"},"user-token")," is required by all subsequent collections runs for all authenticated requests."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"user-token")," is generated by running the ",(0,r.kt)("inlineCode",{parentName:"p"},"Biobanks API - 01 User Authentication")," collection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ newman run "Biobanks API - 01 User Authentication.postman_collection.json" -e "environment.postman_environment.json" --export-collection "environment.postman_environment.json"\n')),(0,r.kt)("p",null,"In this case, we want to export the environment such that the ",(0,r.kt)("inlineCode",{parentName:"p"},"user-token")," is written to the environment configuraton."),(0,r.kt)("h3",{id:"running-a-collection"},(0,r.kt)("strong",{parentName:"h3"},"Running A Collection")),(0,r.kt)("p",null,"To run a collection, the Newman CLI needs reference to the collection and the environment json files"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ newman run "<collection.json>" -e "<environment.json>"\n')),(0,r.kt)("p",null,"For testing on a local environment, where a security certificate may not be configured, the ",(0,r.kt)("inlineCode",{parentName:"p"},"--insecure")," flag must be used to avoid additional errors."),(0,r.kt)("h2",{id:"running-in-postman"},"Running In Postman"),(0,r.kt)("p",null,"These tests can also be imported, and ran via Postman. In Postman use the importer under ",(0,r.kt)("inlineCode",{parentName:"p"},"File > Import > Folder"),". This will import all tests and the template environment to be used in Postman."))}u.isMDXComponent=!0}}]);